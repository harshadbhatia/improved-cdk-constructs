"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessRDSStack = void 0;
const rds = require("aws-cdk-lib/aws-rds");
const ec2 = require("aws-cdk-lib/aws-ec2");
const ssm = require("aws-cdk-lib/aws-ssm");
const cdk = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
class ServerlessRDSStack extends cdk.Stack {
    constructor(scope, id, config, props) {
        super(scope, id, props);
        this.config = config;
        this.createRDS();
    }
    getVPC() {
        const vpcId = ssm.StringParameter.valueFromLookup(this, '/account/vpc/id');
        const vpc = ec2.Vpc.fromLookup(this, 'VPC', { vpcId: vpcId });
        return vpc;
    }
    createRDS() {
        const vpc = this.getVPC();
        this.config.databases.map(cfg => {
            const securityGroup = new aws_ec2_1.SecurityGroup(this, `${cfg.defaultDBName}-DBSecurityGroup`, {
                vpc,
                description: `${cfg.defaultDBName} - Database ingress`,
                securityGroupName: `${cfg.defaultDBName}-DBSecurityGroup`,
            });
            securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(5432), `${cfg.defaultDBName} - Database ingress`);
            const cluster = new rds.ServerlessCluster(this, cfg.clusterName, {
                engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
                vpc: vpc,
                enableDataApi: true,
                parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', cfg.parameterGroupName),
                defaultDatabaseName: cfg.defaultDBName,
                securityGroups: [securityGroup],
            });
        });
    }
}
exports.ServerlessRDSStack = ServerlessRDSStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVybGVzcy1yZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXJ2ZXJsZXNzLXJkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwyQ0FBNEM7QUFDNUMsMkNBQTRDO0FBQzVDLDJDQUE0QztBQUU1QyxtQ0FBb0M7QUFHcEMsaURBQW9EO0FBR3BELE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFJN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxNQUEyQixFQUFFLEtBQXNCO1FBQ3pGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTTtRQUVGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5RCxPQUFPLEdBQUcsQ0FBQTtJQUVkLENBQUM7SUFFRCxTQUFTO1FBRUwsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTFCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUU1QixNQUFNLGFBQWEsR0FBRyxJQUFJLHVCQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsa0JBQWtCLEVBQUU7Z0JBQ2xGLEdBQUc7Z0JBQ0gsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEscUJBQXFCO2dCQUN0RCxpQkFBaUIsRUFBRSxHQUFHLEdBQUcsQ0FBQyxhQUFhLGtCQUFrQjthQUU1RCxDQUFDLENBQUM7WUFFSCxhQUFhLENBQUMsY0FBYyxDQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFDbEIsR0FBRyxHQUFHLENBQUMsYUFBYSxxQkFBcUIsQ0FDNUMsQ0FBQztZQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFO2dCQUM3RCxNQUFNLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQjtnQkFDbkQsR0FBRyxFQUFFLEdBQUc7Z0JBQ1IsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLGNBQWMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3pHLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxhQUFhO2dCQUN0QyxjQUFjLEVBQUUsQ0FBQyxhQUFhLENBQUM7YUFDbEMsQ0FBQyxDQUFDO1FBRVAsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0NBQ0o7QUFuREQsZ0RBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ2F3cy1jZGstbGliL2F3cy1pYW0nKTtcbmltcG9ydCByZHMgPSByZXF1aXJlKCdhd3MtY2RrLWxpYi9hd3MtcmRzJyk7XG5pbXBvcnQgZWMyID0gcmVxdWlyZSgnYXdzLWNkay1saWIvYXdzLWVjMicpO1xuaW1wb3J0IHNzbSA9IHJlcXVpcmUoJ2F3cy1jZGstbGliL2F3cy1zc20nKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnYXdzLWNkay1saWInKTtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgU2VydmVybGVzc1JEU0NvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbGliL3Jkcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFNlY3VyaXR5R3JvdXAgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcblxuXG5leHBvcnQgY2xhc3MgU2VydmVybGVzc1JEU1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcblxuICAgIGNvbmZpZzogU2VydmVybGVzc1JEU0NvbmZpZztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogU2VydmVybGVzc1JEU0NvbmZpZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVSRFMoKTtcbiAgICB9XG5cbiAgICBnZXRWUEMoKTogZWMyLklWcGMge1xuXG4gICAgICAgIGNvbnN0IHZwY0lkID0gc3NtLlN0cmluZ1BhcmFtZXRlci52YWx1ZUZyb21Mb29rdXAodGhpcywgJy9hY2NvdW50L3ZwYy9pZCcpO1xuICAgICAgICBjb25zdCB2cGMgPSBlYzIuVnBjLmZyb21Mb29rdXAodGhpcywgJ1ZQQycsIHsgdnBjSWQ6IHZwY0lkIH0pO1xuXG4gICAgICAgIHJldHVybiB2cGNcblxuICAgIH1cblxuICAgIGNyZWF0ZVJEUygpIHtcblxuICAgICAgICBjb25zdCB2cGMgPSB0aGlzLmdldFZQQygpO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLmRhdGFiYXNlcy5tYXAoY2ZnID0+IHtcblxuICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlHcm91cCA9IG5ldyBTZWN1cml0eUdyb3VwKHRoaXMsIGAke2NmZy5kZWZhdWx0REJOYW1lfS1EQlNlY3VyaXR5R3JvdXBgLCB7XG4gICAgICAgICAgICAgICAgdnBjLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHtjZmcuZGVmYXVsdERCTmFtZX0gLSBEYXRhYmFzZSBpbmdyZXNzYCxcbiAgICAgICAgICAgICAgICBzZWN1cml0eUdyb3VwTmFtZTogYCR7Y2ZnLmRlZmF1bHREQk5hbWV9LURCU2VjdXJpdHlHcm91cGAsXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwLmFkZEluZ3Jlc3NSdWxlKFxuICAgICAgICAgICAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcbiAgICAgICAgICAgICAgICBlYzIuUG9ydC50Y3AoNTQzMiksXG4gICAgICAgICAgICAgICAgYCR7Y2ZnLmRlZmF1bHREQk5hbWV9IC0gRGF0YWJhc2UgaW5ncmVzc2BcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgcmRzLlNlcnZlcmxlc3NDbHVzdGVyKHRoaXMsIGNmZy5jbHVzdGVyTmFtZSwge1xuICAgICAgICAgICAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5BVVJPUkFfUE9TVEdSRVNRTCxcbiAgICAgICAgICAgICAgICB2cGM6IHZwYyxcbiAgICAgICAgICAgICAgICBlbmFibGVEYXRhQXBpOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlckdyb3VwOiByZHMuUGFyYW1ldGVyR3JvdXAuZnJvbVBhcmFtZXRlckdyb3VwTmFtZSh0aGlzLCAnUGFyYW1ldGVyR3JvdXAnLCBjZmcucGFyYW1ldGVyR3JvdXBOYW1lKSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0RGF0YWJhc2VOYW1lOiBjZmcuZGVmYXVsdERCTmFtZSxcbiAgICAgICAgICAgICAgICBzZWN1cml0eUdyb3VwczogW3NlY3VyaXR5R3JvdXBdLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcblxuICAgIH1cbn1cblxuIl19