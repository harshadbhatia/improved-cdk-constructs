"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatadogStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const datadog_cdk_constructs_v2_1 = require("datadog-cdk-constructs-v2");
function applyDefaultsToProps(props) {
    // ENV is different for datadog env
    const p = { ...props };
    delete p['env'];
    delete p['tags'];
    return Object.assign({}, p, {
        "nodeLayerVersion": 78,
        "pythonLayerVersion": 58,
        "extensionLayerVersion": 22,
        "enableDatadogTracing": true,
        "flushMetricsToLogs": true,
        "site": "datadoghq.com",
        "env": props.datadogEnv,
        "service": "",
        "tags": props.datadogTags,
    });
}
class DatadogStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const apiKeySecret = props.apiKeySecret || "/account/datadog/api-key";
        const propsWDefaults = applyDefaultsToProps(props);
        propsWDefaults.apiKeySecretArn = aws_secretsmanager_1.Secret.fromSecretNameV2(this, 'APIKeySecret', apiKeySecret).secretArn;
        this.datadogCDK = new datadog_cdk_constructs_v2_1.Datadog(this, "DatadogIntegration", propsWDefaults);
        // datadogCDK.addLambdaFunctions([f])
    }
}
exports.DatadogStack = DatadogStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWRvZy1jZGstc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhZG9nLWNkay1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0M7QUFDcEMsdUVBQXdEO0FBRXhELHlFQUFvRDtBQU1wRCxTQUFTLG9CQUFvQixDQUFDLEtBQXdCO0lBQ2xELG1DQUFtQztJQUNuQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUM7SUFDdkIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDZixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVoQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN4QixrQkFBa0IsRUFBRSxFQUFFO1FBQ3RCLG9CQUFvQixFQUFFLEVBQUU7UUFDeEIsdUJBQXVCLEVBQUUsRUFBRTtRQUMzQixzQkFBc0IsRUFBRSxJQUFJO1FBQzVCLG9CQUFvQixFQUFFLElBQUk7UUFDMUIsTUFBTSxFQUFFLGVBQWU7UUFDdkIsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFXO1FBQ3hCLFNBQVMsRUFBRSxFQUFFO1FBQ2IsTUFBTSxFQUFFLEtBQUssQ0FBQyxXQUFZO0tBQzdCLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxNQUFhLFlBQWEsU0FBUSxtQkFBSztJQUluQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXlCO1FBQy9ELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sWUFBWSxHQUFHLEtBQU0sQ0FBQyxZQUFZLElBQUksMEJBQTBCLENBQUM7UUFFdkUsTUFBTSxjQUFjLEdBQWtDLG9CQUFvQixDQUFDLEtBQU0sQ0FBQyxDQUFBO1FBQ2xGLGNBQWMsQ0FBQyxlQUFlLEdBQUcsMkJBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQTtRQUV0RyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksbUNBQU8sQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFMUUscUNBQXFDO0lBQ3pDLENBQUM7Q0FDSjtBQWhCRCxvQ0FnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjayB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgU2VjcmV0IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zZWNyZXRzbWFuYWdlclwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERhdGFkb2cgfSBmcm9tIFwiZGF0YWRvZy1jZGstY29uc3RydWN0cy12MlwiO1xuaW1wb3J0IHsgRGF0YWRvZ1N0YWNrUHJvcHMgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9saWIvaW50ZWdyYXRpb25zL2RhdGFkb2cvaW50ZWZhY2VzXCI7XG5cbnR5cGUgRGF0YWRvZ1N0YWNrUHJvcHNXaXRoRGVmYXVsdHMgPSBSZXF1aXJlZDxQaWNrPERhdGFkb2dTdGFja1Byb3BzLCBcIm5vZGVMYXllclZlcnNpb25cIiB8IFwicHl0aG9uTGF5ZXJWZXJzaW9uXCIgfCBcImVuYWJsZURhdGFkb2dUcmFjaW5nXCIgfFxuICAgIFwiZmx1c2hNZXRyaWNzVG9Mb2dzXCIgfCBcInNpdGVcIiA+PiAmIFBhcnRpYWw8UGljazxEYXRhZG9nU3RhY2tQcm9wcywgXCJhcGlLZXlTZWNyZXRBcm5cIj4+ICYgeyBlbnY6IHN0cmluZywgdGFnczogc3RyaW5nIH07XG5cbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdHNUb1Byb3BzKHByb3BzOiBEYXRhZG9nU3RhY2tQcm9wcyk6IERhdGFkb2dTdGFja1Byb3BzV2l0aERlZmF1bHRzIHtcbiAgICAvLyBFTlYgaXMgZGlmZmVyZW50IGZvciBkYXRhZG9nIGVudlxuICAgIGNvbnN0IHAgPSB7IC4uLnByb3BzIH07XG4gICAgZGVsZXRlIHBbJ2VudiddXG4gICAgZGVsZXRlIHBbJ3RhZ3MnXVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHAsIHtcbiAgICAgICAgXCJub2RlTGF5ZXJWZXJzaW9uXCI6IDc4LFxuICAgICAgICBcInB5dGhvbkxheWVyVmVyc2lvblwiOiA1OCxcbiAgICAgICAgXCJleHRlbnNpb25MYXllclZlcnNpb25cIjogMjIsXG4gICAgICAgIFwiZW5hYmxlRGF0YWRvZ1RyYWNpbmdcIjogdHJ1ZSxcbiAgICAgICAgXCJmbHVzaE1ldHJpY3NUb0xvZ3NcIjogdHJ1ZSxcbiAgICAgICAgXCJzaXRlXCI6IFwiZGF0YWRvZ2hxLmNvbVwiLFxuICAgICAgICBcImVudlwiOiBwcm9wcy5kYXRhZG9nRW52ISxcbiAgICAgICAgXCJzZXJ2aWNlXCI6IFwiXCIsXG4gICAgICAgIFwidGFnc1wiOiBwcm9wcy5kYXRhZG9nVGFncyEsXG4gICAgfSlcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFkb2dTdGFjayBleHRlbmRzIFN0YWNrIHtcblxuICAgIGRhdGFkb2dDREs6IERhdGFkb2dcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogRGF0YWRvZ1N0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgYXBpS2V5U2VjcmV0ID0gcHJvcHMhLmFwaUtleVNlY3JldCB8fCBcIi9hY2NvdW50L2RhdGFkb2cvYXBpLWtleVwiO1xuXG4gICAgICAgIGNvbnN0IHByb3BzV0RlZmF1bHRzOiBEYXRhZG9nU3RhY2tQcm9wc1dpdGhEZWZhdWx0cyA9IGFwcGx5RGVmYXVsdHNUb1Byb3BzKHByb3BzISlcbiAgICAgICAgcHJvcHNXRGVmYXVsdHMuYXBpS2V5U2VjcmV0QXJuID0gU2VjcmV0LmZyb21TZWNyZXROYW1lVjIodGhpcywgJ0FQSUtleVNlY3JldCcsIGFwaUtleVNlY3JldCkuc2VjcmV0QXJuXG5cbiAgICAgICAgdGhpcy5kYXRhZG9nQ0RLID0gbmV3IERhdGFkb2codGhpcywgXCJEYXRhZG9nSW50ZWdyYXRpb25cIiwgcHJvcHNXRGVmYXVsdHMpO1xuXG4gICAgICAgIC8vIGRhdGFkb2dDREsuYWRkTGFtYmRhRnVuY3Rpb25zKFtmXSlcbiAgICB9XG59Il19