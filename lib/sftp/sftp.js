"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SFTPStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_transfer_1 = require("aws-cdk-lib/aws-transfer");
const common_1 = require("../utils/common");
const sftp_nested_users_1 = require("./sftp-nested-users");
class SFTPStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, config, userCfg, props) {
        super(scope, id, props);
        this.config = config;
        this.userConfig = userCfg;
        this.createElasticIPs();
        this.createS3Bucket();
        this.outputEIPBucket();
        if (this.config.sftpServiceEnabled) {
            this.createSFTP();
            new sftp_nested_users_1.SFTPUsersNestedStack(this, 'SFTPUsers', userCfg, this.sftpBucket.bucketName, this.sftpServer.attrServerId);
            // this.outputSFTPEndpoint()
        }
        // this.addTags()
        // this.createParams()
    }
    createS3Bucket() {
        this.sftpBucket = new aws_s3_1.Bucket(this, 'sftp-bucket', {
            bucketName: this.config.bucketName,
            encryption: aws_s3_1.BucketEncryption.S3_MANAGED,
            enforceSSL: true,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            versioned: true,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
        });
    }
    createLoggingRole() {
        return new aws_iam_1.Role(this, `SFTPLoggingRole`, {
            roleName: `${aws_cdk_lib_1.Aws.STACK_NAME}-Logging-Role`,
            description: `Logging for SFTP Servier`,
            assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('transfer.amazonaws.com')),
            inlinePolicies: {
                LoggingPolicy: this.createLoggingPolicy(),
            },
        });
    }
    // ####### IAM ROLES #######
    createLoggingPolicy() {
        const loggingPolicy = new aws_iam_1.PolicyStatement({
            sid: 'SFTPCloudWatchLogging',
            actions: ['logs:CreateLogStream', 'logs:DescribeLogStreams', 'logs:CreateLogGroup', 'logs:PutLogEvents'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: ['arn:aws:logs:*:*:log-group:/aws/transfer/*'],
        });
        const userBucketInlinePolicyDocument = new aws_iam_1.PolicyDocument({
            statements: [loggingPolicy],
        });
        return userBucketInlinePolicyDocument;
    }
    createElasticIPs() {
        this.eIps = Array.from(Array(3).keys()).map((i) => new aws_ec2_1.CfnEIP(this, `EIP${i}`, {
            tags: [
                {
                    key: 'Name',
                    value: `${aws_cdk_lib_1.Aws.STACK_NAME}-EIP${i}`,
                },
            ],
        }));
    }
    createSFTP() {
        const securityGroup = new aws_ec2_1.SecurityGroup(this, 'SecurityGroup', {
            vpc: aws_ec2_1.Vpc.fromLookup(this, 'VPC', {
                vpcId: this.config.vpcId,
            }),
            allowAllOutbound: true,
            securityGroupName: 'SFTP-Access',
            description: 'SFTP Access',
        });
        //  Iterate over users and allowd IPS for each user and add it to security group
        Object.entries(this.userConfig.users).map(([i, user]) => user.allowedIps.map((ip) => securityGroup.addIngressRule(aws_ec2_1.Peer.ipv4(ip), aws_ec2_1.Port.tcp(22), `Allow SFTP traffic for user - ${user.name}`)));
        this.sftpServer = new aws_transfer_1.CfnServer(this, 'SFTPServer', {
            endpointType: 'VPC',
            loggingRole: this.createLoggingRole().roleArn,
            protocols: ['SFTP'],
            endpointDetails: {
                vpcId: this.config.vpcId,
                addressAllocationIds: this.eIps.map((eip) => eip.attrAllocationId),
                // works wiht public
                subnetIds: (0, common_1.convertStringToArray)(this.config.publicSubnetIds),
                securityGroupIds: [securityGroup.securityGroupId],
            },
        });
    }
    outputEIPBucket() {
        this.eIps.map((eip, i) => new aws_cdk_lib_1.CfnOutput(this, `EIPOutput${i}`, {
            value: eip.ref,
            description: `IP For SFTP server`,
            exportName: `SFTP${i}`,
        }));
        new aws_cdk_lib_1.CfnOutput(this, `SFTPBucketOutput`, {
            value: this.sftpBucket.bucketName,
            description: `SFTP S3 Bucket`,
            exportName: `SFTPBucket`,
        });
    }
}
exports.SFTPStack = SFTPStack;
//# sourceMappingURL=data:application/json;base64,