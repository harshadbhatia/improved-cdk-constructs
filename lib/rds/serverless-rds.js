"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessRDSStack = void 0;
const rds = require("aws-cdk-lib/aws-rds");
const ec2 = require("aws-cdk-lib/aws-ec2");
const ssm = require("aws-cdk-lib/aws-ssm");
const cdk = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
class ServerlessRDSStack extends cdk.Stack {
    constructor(scope, id, config, props) {
        super(scope, id, props);
        this.config = config;
        this.createRDS();
    }
    getVPC() {
        const vpcId = ssm.StringParameter.valueFromLookup(this, '/account/vpc/id');
        const vpc = ec2.Vpc.fromLookup(this, 'VPC', { vpcId: vpcId });
        return vpc;
    }
    createRDS() {
        const vpc = this.getVPC();
        this.config.databases.map(cfg => {
            const securityGroup = new aws_ec2_1.SecurityGroup(this, `${cfg.defaultDBName}-DBSecurityGroup`, {
                vpc,
                description: `${cfg.defaultDBName} - Database ingress`,
                securityGroupName: `${cfg.defaultDBName}-DBSecurityGroup`,
            });
            securityGroup.addIngressRule(ec2.Peer.ipv4(cfg.allowedCidr), ec2.Port.tcp(5432), `${cfg.defaultDBName} - Database ingress`);
            if (cfg.snapshotIdentifier) {
                const cluster = new rds.ServerlessClusterFromSnapshot(this, cfg.clusterName, {
                    engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
                    snapshotIdentifier: cfg.snapshotIdentifier,
                    vpc: vpc,
                    enableDataApi: true,
                    parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', cfg.parameterGroupName),
                    defaultDatabaseName: cfg.defaultDBName,
                    securityGroups: [securityGroup],
                });
            }
            else {
                const cluster = new rds.ServerlessCluster(this, cfg.clusterName, {
                    engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
                    vpc: vpc,
                    enableDataApi: true,
                    parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', cfg.parameterGroupName),
                    defaultDatabaseName: cfg.defaultDBName,
                    securityGroups: [securityGroup],
                });
            }
        });
    }
}
exports.ServerlessRDSStack = ServerlessRDSStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVybGVzcy1yZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXJ2ZXJsZXNzLXJkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwyQ0FBNEM7QUFDNUMsMkNBQTRDO0FBQzVDLDJDQUE0QztBQUU1QyxtQ0FBb0M7QUFHcEMsaURBQW9EO0FBR3BELE1BQWEsa0JBQW1CLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFJN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxNQUEyQixFQUFFLEtBQXNCO1FBQ3pGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTTtRQUVGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5RCxPQUFPLEdBQUcsQ0FBQTtJQUVkLENBQUM7SUFFRCxTQUFTO1FBRUwsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTFCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLGFBQWEsR0FBRyxJQUFJLHVCQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsa0JBQWtCLEVBQUU7Z0JBQ2xGLEdBQUc7Z0JBQ0gsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEscUJBQXFCO2dCQUN0RCxpQkFBaUIsRUFBRSxHQUFHLEdBQUcsQ0FBQyxhQUFhLGtCQUFrQjthQUU1RCxDQUFDLENBQUM7WUFFSCxhQUFhLENBQUMsY0FBYyxDQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUNsQixHQUFHLEdBQUcsQ0FBQyxhQUFhLHFCQUFxQixDQUM1QyxDQUFDO1lBRUYsSUFBSSxHQUFHLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLDZCQUE2QixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFO29CQUN6RSxNQUFNLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQjtvQkFDbkQsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLGtCQUFrQjtvQkFDMUMsR0FBRyxFQUFFLEdBQUc7b0JBQ1IsYUFBYSxFQUFFLElBQUk7b0JBQ25CLGNBQWMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUM7b0JBQ3pHLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxhQUFhO29CQUN0QyxjQUFjLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ2xDLENBQUMsQ0FBQzthQUVOO2lCQUNJO2dCQUNELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFO29CQUM3RCxNQUFNLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQjtvQkFDbkQsR0FBRyxFQUFFLEdBQUc7b0JBQ1IsYUFBYSxFQUFFLElBQUk7b0JBQ25CLGNBQWMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUM7b0JBQ3pHLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxhQUFhO29CQUN0QyxjQUFjLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ2xDLENBQUMsQ0FBQzthQUNOO1FBR0wsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0NBQ0o7QUFqRUQsZ0RBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ2F3cy1jZGstbGliL2F3cy1pYW0nKTtcbmltcG9ydCByZHMgPSByZXF1aXJlKCdhd3MtY2RrLWxpYi9hd3MtcmRzJyk7XG5pbXBvcnQgZWMyID0gcmVxdWlyZSgnYXdzLWNkay1saWIvYXdzLWVjMicpO1xuaW1wb3J0IHNzbSA9IHJlcXVpcmUoJ2F3cy1jZGstbGliL2F3cy1zc20nKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnYXdzLWNkay1saWInKTtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgU2VydmVybGVzc1JEU0NvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbGliL3Jkcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFNlY3VyaXR5R3JvdXAgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcblxuXG5leHBvcnQgY2xhc3MgU2VydmVybGVzc1JEU1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcblxuICAgIGNvbmZpZzogU2VydmVybGVzc1JEU0NvbmZpZztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogU2VydmVybGVzc1JEU0NvbmZpZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVSRFMoKTtcbiAgICB9XG5cbiAgICBnZXRWUEMoKTogZWMyLklWcGMge1xuXG4gICAgICAgIGNvbnN0IHZwY0lkID0gc3NtLlN0cmluZ1BhcmFtZXRlci52YWx1ZUZyb21Mb29rdXAodGhpcywgJy9hY2NvdW50L3ZwYy9pZCcpO1xuICAgICAgICBjb25zdCB2cGMgPSBlYzIuVnBjLmZyb21Mb29rdXAodGhpcywgJ1ZQQycsIHsgdnBjSWQ6IHZwY0lkIH0pO1xuXG4gICAgICAgIHJldHVybiB2cGNcblxuICAgIH1cblxuICAgIGNyZWF0ZVJEUygpIHtcblxuICAgICAgICBjb25zdCB2cGMgPSB0aGlzLmdldFZQQygpO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLmRhdGFiYXNlcy5tYXAoY2ZnID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlY3VyaXR5R3JvdXAgPSBuZXcgU2VjdXJpdHlHcm91cCh0aGlzLCBgJHtjZmcuZGVmYXVsdERCTmFtZX0tREJTZWN1cml0eUdyb3VwYCwge1xuICAgICAgICAgICAgICAgIHZwYyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7Y2ZnLmRlZmF1bHREQk5hbWV9IC0gRGF0YWJhc2UgaW5ncmVzc2AsXG4gICAgICAgICAgICAgICAgc2VjdXJpdHlHcm91cE5hbWU6IGAke2NmZy5kZWZhdWx0REJOYW1lfS1EQlNlY3VyaXR5R3JvdXBgLFxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcbiAgICAgICAgICAgICAgICBlYzIuUGVlci5pcHY0KGNmZy5hbGxvd2VkQ2lkciksXG4gICAgICAgICAgICAgICAgZWMyLlBvcnQudGNwKDU0MzIpLFxuICAgICAgICAgICAgICAgIGAke2NmZy5kZWZhdWx0REJOYW1lfSAtIERhdGFiYXNlIGluZ3Jlc3NgXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoY2ZnLnNuYXBzaG90SWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgcmRzLlNlcnZlcmxlc3NDbHVzdGVyRnJvbVNuYXBzaG90KHRoaXMsIGNmZy5jbHVzdGVyTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHJkcy5EYXRhYmFzZUNsdXN0ZXJFbmdpbmUuQVVST1JBX1BPU1RHUkVTUUwsXG4gICAgICAgICAgICAgICAgICAgIHNuYXBzaG90SWRlbnRpZmllcjogY2ZnLnNuYXBzaG90SWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgdnBjOiB2cGMsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZURhdGFBcGk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlckdyb3VwOiByZHMuUGFyYW1ldGVyR3JvdXAuZnJvbVBhcmFtZXRlckdyb3VwTmFtZSh0aGlzLCAnUGFyYW1ldGVyR3JvdXAnLCBjZmcucGFyYW1ldGVyR3JvdXBOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdERhdGFiYXNlTmFtZTogY2ZnLmRlZmF1bHREQk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBzOiBbc2VjdXJpdHlHcm91cF0sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgcmRzLlNlcnZlcmxlc3NDbHVzdGVyKHRoaXMsIGNmZy5jbHVzdGVyTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHJkcy5EYXRhYmFzZUNsdXN0ZXJFbmdpbmUuQVVST1JBX1BPU1RHUkVTUUwsXG4gICAgICAgICAgICAgICAgICAgIHZwYzogdnBjLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVEYXRhQXBpOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJHcm91cDogcmRzLlBhcmFtZXRlckdyb3VwLmZyb21QYXJhbWV0ZXJHcm91cE5hbWUodGhpcywgJ1BhcmFtZXRlckdyb3VwJywgY2ZnLnBhcmFtZXRlckdyb3VwTmFtZSksXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHREYXRhYmFzZU5hbWU6IGNmZy5kZWZhdWx0REJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUdyb3VwczogW3NlY3VyaXR5R3JvdXBdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSlcblxuICAgIH1cbn0iXX0=