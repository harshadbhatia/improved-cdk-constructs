"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatadogIntegration = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const constructs_1 = require("constructs");
const config_1 = require("./config");
const datadog_integration_role_stack_1 = require("./datadog-integration-role-stack");
class DatadogIntegration extends constructs_1.Construct {
    /**
     * Based on https://github.com/DataDog/cloudformation-template/blob/master/aws/main.yaml
     */
    constructor(scope, id, props) {
        super(scope, id);
        const propsWithDefaults = config_1.applyDataDogDefaultsToConfig(props);
        this.createIntegrationRoleStack(propsWithDefaults);
        // This is meant to be legacy, need to investigate other supported services before removal
        // const f = this.createForwarderStack(propsWithDefaults)
    }
    createIntegrationRoleStack(props) {
        return new datadog_integration_role_stack_1.DatadogIntegrationRoleStack(this, 'DatadogIntegrationRole', props);
    }
    // Responsible for shipping logs, custom metrics, etc - Not required when using layer extension
    createForwarderStack(props) {
        return new aws_cdk_lib_1.CfnStack(this, "DatadogForwarderStack", {
            templateUrl: `https://datadog-cloudformation-template.s3.amazonaws.com/aws/forwarder/${props.forwarderVersion}.yaml`,
            parameters: Object.assign({
                DdApiKey: "USE_ARN",
                DdApiKeySecretArn: aws_secretsmanager_1.Secret.fromSecretNameV2(this, "DatadogApiKey", props.apiKey).secretArn,
                DdSite: props.site,
                FunctionName: props.forwarderName,
            }, { ...props.additionalForwarderParams }),
        });
    }
}
exports.DatadogIntegration = DatadogIntegration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWRvZy1pbnRlZ3JhdGlvbi1jb25zdHJ1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhZG9nLWludGVncmF0aW9uLWNvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBOEM7QUFDOUMsdUVBQXdEO0FBQ3hELDJDQUF1QztBQUV2QyxxQ0FBa0c7QUFDbEcscUZBQStFO0FBRy9FLE1BQWEsa0JBQW1CLFNBQVEsc0JBQVM7SUFDN0M7O09BRUc7SUFFSCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNDO1FBQzVFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFaEIsTUFBTSxpQkFBaUIsR0FBRyxxQ0FBNEIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUU3RCxJQUFJLENBQUMsMEJBQTBCLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUNsRCwwRkFBMEY7UUFDMUYseURBQXlEO0lBRTdELENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxLQUErQztRQUN0RSxPQUFPLElBQUksNERBQTJCLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2pGLENBQUM7SUFDRCwrRkFBK0Y7SUFDdkYsb0JBQW9CLENBQUMsS0FBK0M7UUFFeEUsT0FBTyxJQUFJLHNCQUFRLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQy9DLFdBQVcsRUFBRSwwRUFBMEUsS0FBSyxDQUFDLGdCQUFnQixPQUFPO1lBQ3BILFVBQVUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUNyQjtnQkFDSSxRQUFRLEVBQUUsU0FBUztnQkFDbkIsaUJBQWlCLEVBQUUsMkJBQU0sQ0FBQyxnQkFBZ0IsQ0FDdEMsSUFBSSxFQUNKLGVBQWUsRUFDZixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUztnQkFDM0IsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO2dCQUNsQixZQUFZLEVBQUUsS0FBSyxDQUFDLGFBQWE7YUFDcEMsRUFDRCxFQUFFLEdBQUcsS0FBSyxDQUFDLHlCQUF5QixFQUFFLENBQ3pDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBdENELGdEQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENmblN0YWNrLCBTdGFjayB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgU2VjcmV0IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zZWNyZXRzbWFuYWdlclwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERhdGFkb2dBV1NJbnRlZ3JhdGlvblN0YWNrUHJvcHMgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9saWIvaW50ZWdyYXRpb25zL2RhdGFkb2cvaW50ZWZhY2VzXCI7XG5pbXBvcnQgeyBhcHBseURhdGFEb2dEZWZhdWx0c1RvQ29uZmlnLCBEYXRhZG9nSW50ZWdyYXRpb25TdGFja1Byb3BzV2l0aERlZmF1bHRzIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBEYXRhZG9nSW50ZWdyYXRpb25Sb2xlU3RhY2sgfSBmcm9tIFwiLi9kYXRhZG9nLWludGVncmF0aW9uLXJvbGUtc3RhY2tcIjtcblxuXG5leHBvcnQgY2xhc3MgRGF0YWRvZ0ludGVncmF0aW9uIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgICAvKipcbiAgICAgKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vRGF0YURvZy9jbG91ZGZvcm1hdGlvbi10ZW1wbGF0ZS9ibG9iL21hc3Rlci9hd3MvbWFpbi55YW1sXG4gICAgICovXG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGF0YWRvZ0FXU0ludGVncmF0aW9uU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpXG5cbiAgICAgICAgY29uc3QgcHJvcHNXaXRoRGVmYXVsdHMgPSBhcHBseURhdGFEb2dEZWZhdWx0c1RvQ29uZmlnKHByb3BzKVxuXG4gICAgICAgIHRoaXMuY3JlYXRlSW50ZWdyYXRpb25Sb2xlU3RhY2socHJvcHNXaXRoRGVmYXVsdHMpXG4gICAgICAgIC8vIFRoaXMgaXMgbWVhbnQgdG8gYmUgbGVnYWN5LCBuZWVkIHRvIGludmVzdGlnYXRlIG90aGVyIHN1cHBvcnRlZCBzZXJ2aWNlcyBiZWZvcmUgcmVtb3ZhbFxuICAgICAgICAvLyBjb25zdCBmID0gdGhpcy5jcmVhdGVGb3J3YXJkZXJTdGFjayhwcm9wc1dpdGhEZWZhdWx0cylcblxuICAgIH1cblxuICAgIGNyZWF0ZUludGVncmF0aW9uUm9sZVN0YWNrKHByb3BzOiBEYXRhZG9nSW50ZWdyYXRpb25TdGFja1Byb3BzV2l0aERlZmF1bHRzKTogU3RhY2sge1xuICAgICAgICByZXR1cm4gbmV3IERhdGFkb2dJbnRlZ3JhdGlvblJvbGVTdGFjayh0aGlzLCAnRGF0YWRvZ0ludGVncmF0aW9uUm9sZScsIHByb3BzKVxuICAgIH1cbiAgICAvLyBSZXNwb25zaWJsZSBmb3Igc2hpcHBpbmcgbG9ncywgY3VzdG9tIG1ldHJpY3MsIGV0YyAtIE5vdCByZXF1aXJlZCB3aGVuIHVzaW5nIGxheWVyIGV4dGVuc2lvblxuICAgIHByaXZhdGUgY3JlYXRlRm9yd2FyZGVyU3RhY2socHJvcHM6IERhdGFkb2dJbnRlZ3JhdGlvblN0YWNrUHJvcHNXaXRoRGVmYXVsdHMpOiBDZm5TdGFjayB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDZm5TdGFjayh0aGlzLCBcIkRhdGFkb2dGb3J3YXJkZXJTdGFja1wiLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogYGh0dHBzOi8vZGF0YWRvZy1jbG91ZGZvcm1hdGlvbi10ZW1wbGF0ZS5zMy5hbWF6b25hd3MuY29tL2F3cy9mb3J3YXJkZXIvJHtwcm9wcy5mb3J3YXJkZXJWZXJzaW9ufS55YW1sYCxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBEZEFwaUtleTogXCJVU0VfQVJOXCIsXG4gICAgICAgICAgICAgICAgICAgIERkQXBpS2V5U2VjcmV0QXJuOiBTZWNyZXQuZnJvbVNlY3JldE5hbWVWMihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkRhdGFkb2dBcGlLZXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmFwaUtleSkuc2VjcmV0QXJuLFxuICAgICAgICAgICAgICAgICAgICBEZFNpdGU6IHByb3BzLnNpdGUsXG4gICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uTmFtZTogcHJvcHMuZm9yd2FyZGVyTmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgLi4ucHJvcHMuYWRkaXRpb25hbEZvcndhcmRlclBhcmFtcyB9XG4gICAgICAgICAgICApLFxuICAgICAgICB9KTtcbiAgICB9XG59Il19