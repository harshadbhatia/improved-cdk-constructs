"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enableAWSLogServices = exports.createAWSLambdaARN = exports.configureLogCollection = exports.setupDatadogIntegration = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const datadog_api_client_1 = require("@datadog/datadog-api-client");
const process_1 = require("process");
const API_KEY_SECRET = '/account/datadog/api-key';
const APP_KEY_SECRET = '/account/datadog/app-key';
const EXTERNAL_ID_SECRET = '/account/datadog/external-id';
async function setupDatadogIntegration(apiKey, appKey) {
    return await createAWSIntegration(apiKey, appKey)
        .then((externalId) => {
        if (externalId) {
            createExternalIDSecret(externalId);
            return externalId;
            // .then((data) => externalId)
            // .catch((err) => console.error("[Datadog] Unable to update external id to secret"))
        }
        else {
            // Could be an update // we get external id
            const s = getSecretValue(EXTERNAL_ID_SECRET, `[Datadog] Unable to get secret at ${EXTERNAL_ID_SECRET}`);
            return s;
            // .then((v) => JSON.parse(v).id)
            // .catch((err) => console.log("[Datadog]Unable to get secret"))
        }
    }).catch((err) => console.error("[Datadog] Unable to create AWS Integration", err));
}
exports.setupDatadogIntegration = setupDatadogIntegration;
async function createExternalIDSecret(externalId) {
    const client = getSecretManagerClient();
    const cmd = new client_secrets_manager_1.CreateSecretCommand({
        Name: EXTERNAL_ID_SECRET,
        Description: 'External ID associated with Datadog AWS Integration',
        SecretString: `{"id": "${externalId}"}`,
    });
    await client.send(cmd).then((data) => {
        console.log("[Datadog] External ID secret created");
        return 'OK';
    }).catch((err) => {
        console.error(`[Datadog] Unable to create secret at location /account/datadog/external-id`, err);
        (0, process_1.exit)(1);
    });
}
function getSecretManagerClient() {
    const client = new client_secrets_manager_1.SecretsManagerClient({ region: process.env.CDK_DEFAULT_REGION });
    return client;
}
async function getAPIKey(apiKey, appKey) {
    const apiKeyVal = await getSecretValue(apiKey, `[Datadog] Unable to find secret ${apiKey}. Ensure only value is stored in secret`);
    const appKeyVal = await getSecretValue(appKey, `[Datadog] Unable to find secret ${appKey}. Ensure only value is stored in secret`);
    return [apiKeyVal, appKeyVal];
}
async function getSecretValue(secretId, errorString) {
    const client = getSecretManagerClient();
    const cmd = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: secretId });
    return await client.send(cmd).then((data) => {
        return data.SecretString;
    });
    // .catch((err) => {
    //     console.error(errorString)
    //     exit(1)
    // })
}
function createAPIInstance(apiKey, appKey) {
    const configuration = datadog_api_client_1.v1.createConfiguration({
        authMethods: {
            apiKeyAuth: apiKey,
            appKeyAuth: appKey
        }
    });
    const apiInstance = new datadog_api_client_1.v1.AWSIntegrationApi(configuration);
    return apiInstance;
}
async function createAWSIntegration(apiKey, appKey) {
    /**
     * Get all AWS tag filters returns "OK" response
     */
    return await getAPIKey(apiKey, appKey)
        .then(([apiKeyValue, appKeyValue]) => {
        console.log('[Datadog] Read secrets');
        const apiInstance = createAPIInstance(apiKeyValue, appKeyValue);
        return updateAWSAPIIntegration(apiInstance)
            .then((data) => {
            console.log("[Datadog] Updated account successfully");
            return;
        }).catch((error) => {
            console.log("[Datadog] Failed to update configuration, trying to create it instead");
            return createAWSAPIIntegration(apiInstance)
                .then((data) => { return data.externalId; })
                .catch((error) => { console.error(error); (0, process_1.exit)(1); });
        });
    }).catch((err) => {
        console.error("[Datadog] Failed to get APP Key", err);
        (0, process_1.exit)(1);
    });
}
function createAWSAPIIntegration(apiInstance) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            filterTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            hostTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            metricsCollectionEnabled: true,
            resourceCollectionEnabled: true,
            cspmResourceCollectionEnabled: true,
            // excludedRegions: ["us-east-1", "us-west-2"],
            roleName: "DatadogAWSIntegrationRole",
        },
    };
    return apiInstance
        .createAWSAccount(params);
}
async function updateAWSAPIIntegration(apiInstance) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            filterTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            hostTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            metricsCollectionEnabled: true,
            resourceCollectionEnabled: true,
        },
        accountId: process.env.CDK_DEFAULT_ACCOUNT,
        roleName: "DatadogAWSIntegrationRole",
    };
    return await apiInstance
        .updateAWSAccount(params);
}
// Deprecated ?
async function configureLogCollection(lambdaArn, services, secretKey) {
    // const secret = await getAPIKey(API_KEY_SECRET, APP_KEY_SECRET)
    const configuration = datadog_api_client_1.v1.createConfiguration({
        authMethods: {
            apiKeyAuth: API_KEY_SECRET,
            appKeyAuth: APP_KEY_SECRET
        }
    });
    // This is created after integration is created, along with forwarder stack.
    await createAWSLambdaARN(new datadog_api_client_1.v1.AWSLogsIntegrationApi(configuration), lambdaArn);
    await enableAWSLogServices(new datadog_api_client_1.v1.AWSLogsIntegrationApi(configuration), services);
}
exports.configureLogCollection = configureLogCollection;
async function createAWSLambdaARN(apiInstance, lambdaArn) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            lambdaArn: lambdaArn,
        },
    };
    await apiInstance
        .createAWSLambdaARN(params)
        .then((data) => console.log("[Datadog] Lambda Integration for logs created"))
        .catch((error) => {
        console.error(error);
        (0, process_1.exit)(1);
    });
}
exports.createAWSLambdaARN = createAWSLambdaARN;
async function enableAWSLogServices(apiInstance, services = ["lambda"]) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            services: services
        },
    };
    await apiInstance
        .enableAWSLogServices(params)
        .then((data) => console.log(`[Datadog] Enabled services for ${services}`))
        .catch((error) => { console.error(error); (0, process_1.exit)(1); });
}
exports.enableAWSLogServices = enableAWSLogServices;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtaW50ZWdyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR1cC1pbnRlZ3JhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0RUFBbUg7QUFDbkgsb0VBQWlEO0FBQ2pELHFDQUErQjtBQUUvQixNQUFNLGNBQWMsR0FBRywwQkFBMEIsQ0FBQTtBQUNqRCxNQUFNLGNBQWMsR0FBRywwQkFBMEIsQ0FBQTtBQUNqRCxNQUFNLGtCQUFrQixHQUFHLDhCQUE4QixDQUFBO0FBR2xELEtBQUssVUFBVSx1QkFBdUIsQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUN4RSxPQUFPLE1BQU0sb0JBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztTQUM1QyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUNqQixJQUFJLFVBQVUsRUFBRTtZQUNaLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ2xDLE9BQU8sVUFBVSxDQUFBO1lBQ2pCLDhCQUE4QjtZQUM5QixxRkFBcUY7U0FDeEY7YUFBTTtZQUNILDJDQUEyQztZQUMzQyxNQUFNLENBQUMsR0FBRyxjQUFjLENBQUMsa0JBQWtCLEVBQUUscUNBQXFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQTtZQUN2RyxPQUFPLENBQUMsQ0FBQTtZQUNSLGlDQUFpQztZQUNqQyxnRUFBZ0U7U0FDbkU7SUFFTCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsNENBQTRDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUczRixDQUFDO0FBbkJELDBEQW1CQztBQUVELEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxVQUFrQjtJQUNwRCxNQUFNLE1BQU0sR0FBRyxzQkFBc0IsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksNENBQW1CLENBQUM7UUFDaEMsSUFBSSxFQUFFLGtCQUFrQjtRQUN4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QUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0I7WUFDM0MsU0FBUyxFQUFFLFNBQVM7U0FDdkI7S0FDSixDQUFDO0lBRUYsTUFBTSxXQUFXO1NBQ1osa0JBQWtCLENBQUMsTUFBTSxDQUFDO1NBQzFCLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2pGLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEIsSUFBQSxjQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUE7SUFDWCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFoQkQsZ0RBZ0JDO0FBRU0sS0FBSyxVQUFVLG9CQUFvQixDQUFDLFdBQXFDLEVBQUUsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDO0lBRW5HLE1BQU0sTUFBTSxHQUF3RDtRQUNoRSxJQUFJLEVBQUU7WUFDRixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0I7WUFDM0MsUUFBUSxFQUFFLFFBQVE7U0FDckI7S0FDSixDQUFDO0lBRUYsTUFBTSxXQUFXO1NBQ1osb0JBQW9CLENBQUMsTUFBTSxDQUFDO1NBQzVCLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5RSxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFBLGNBQUksRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFiRCxvREFhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVNlY3JldENvbW1hbmQsIEdldFNlY3JldFZhbHVlQ29tbWFuZCwgU2VjcmV0c01hbmFnZXJDbGllbnQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNlY3JldHMtbWFuYWdlclwiO1xuaW1wb3J0IHsgdjEgfSBmcm9tIFwiQGRhdGFkb2cvZGF0YWRvZy1hcGktY2xpZW50XCI7XG5pbXBvcnQgeyBleGl0IH0gZnJvbSBcInByb2Nlc3NcIjtcblxuY29uc3QgQVBJX0tFWV9TRUNSRVQgPSAnL2FjY291bnQvZGF0YWRvZy9hcGkta2V5J1xuY29uc3QgQVBQX0tFWV9TRUNSRVQgPSAnL2FjY291bnQvZGF0YWRvZy9hcHAta2V5J1xuY29uc3QgRVhURVJOQUxfSURfU0VDUkVUID0gJy9hY2NvdW50L2RhdGFkb2cvZXh0ZXJuYWwtaWQnXG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldHVwRGF0YWRvZ0ludGVncmF0aW9uKGFwaUtleTogc3RyaW5nLCBhcHBLZXk6IHN0cmluZykge1xuICAgIHJldHVybiBhd2FpdCBjcmVhdGVBV1NJbnRlZ3JhdGlvbihhcGlLZXksIGFwcEtleSlcbiAgICAgICAgLnRoZW4oKGV4dGVybmFsSWQpID0+IHtcbiAgICAgICAgICAgIGlmIChleHRlcm5hbElkKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlRXh0ZXJuYWxJRFNlY3JldChleHRlcm5hbElkKVxuICAgICAgICAgICAgICAgIHJldHVybiBleHRlcm5hbElkXG4gICAgICAgICAgICAgICAgLy8gLnRoZW4oKGRhdGEpID0+IGV4dGVybmFsSWQpXG4gICAgICAgICAgICAgICAgLy8gLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoXCJbRGF0YWRvZ10gVW5hYmxlIHRvIHVwZGF0ZSBleHRlcm5hbCBpZCB0byBzZWNyZXRcIikpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENvdWxkIGJlIGFuIHVwZGF0ZSAvLyB3ZSBnZXQgZXh0ZXJuYWwgaWRcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gZ2V0U2VjcmV0VmFsdWUoRVhURVJOQUxfSURfU0VDUkVULCBgW0RhdGFkb2ddIFVuYWJsZSB0byBnZXQgc2VjcmV0IGF0ICR7RVhURVJOQUxfSURfU0VDUkVUfWApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgICAgICAvLyAudGhlbigodikgPT4gSlNPTi5wYXJzZSh2KS5pZClcbiAgICAgICAgICAgICAgICAvLyAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coXCJbRGF0YWRvZ11VbmFibGUgdG8gZ2V0IHNlY3JldFwiKSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKFwiW0RhdGFkb2ddIFVuYWJsZSB0byBjcmVhdGUgQVdTIEludGVncmF0aW9uXCIsIGVycikpXG5cblxufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVFeHRlcm5hbElEU2VjcmV0KGV4dGVybmFsSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGNsaWVudCA9IGdldFNlY3JldE1hbmFnZXJDbGllbnQoKVxuICAgIGNvbnN0IGNtZCA9IG5ldyBDcmVhdGVTZWNyZXRDb21tYW5kKHtcbiAgICAgICAgTmFtZTogRVhURVJOQUxfSURfU0VDUkVULFxuICAgICAgICBEZXNjcmlwdGlvbjogJ0V4dGVybmFsIElEIGFzc29jaWF0ZWQgd2l0aCBEYXRhZG9nIEFXUyBJbnRlZ3JhdGlvbicsXG4gICAgICAgIFNlY3JldFN0cmluZzogYHtcImlkXCI6IFwiJHtleHRlcm5hbElkfVwifWAsXG4gICAgfSk7XG5cbiAgICBhd2FpdCBjbGllbnQuc2VuZChjbWQpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbRGF0YWRvZ10gRXh0ZXJuYWwgSUQgc2VjcmV0IGNyZWF0ZWRcIilcbiAgICAgICAgcmV0dXJuICdPSydcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtEYXRhZG9nXSBVbmFibGUgdG8gY3JlYXRlIHNlY3JldCBhdCBsb2NhdGlvbiAvYWNjb3VudC9kYXRhZG9nL2V4dGVybmFsLWlkYCwgZXJyKVxuICAgICAgICBleGl0KDEpXG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gZ2V0U2VjcmV0TWFuYWdlckNsaWVudCgpOiBTZWNyZXRzTWFuYWdlckNsaWVudCB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IFNlY3JldHNNYW5hZ2VyQ2xpZW50KHsgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSlcbiAgICByZXR1cm4gY2xpZW50XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFQSUtleShhcGlLZXk6IHN0cmluZywgYXBwS2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBhcGlLZXlWYWwgPSBhd2FpdCBnZXRTZWNyZXRWYWx1ZShcbiAgICAgICAgYXBpS2V5LFxuICAgICAgICBgW0RhdGFkb2ddIFVuYWJsZSB0byBmaW5kIHNlY3JldCAke2FwaUtleX0uIEVuc3VyZSBvbmx5IHZhbHVlIGlzIHN0b3JlZCBpbiBzZWNyZXRgXG4gICAgKVxuICAgIGNvbnN0IGFwcEtleVZhbCA9IGF3YWl0IGdldFNlY3JldFZhbHVlKFxuICAgICAgICBhcHBLZXksXG4gICAgICAgIGBbRGF0YWRvZ10gVW5hYmxlIHRvIGZpbmQgc2VjcmV0ICR7YXBwS2V5fS4gRW5zdXJlIG9ubHkgdmFsdWUgaXMgc3RvcmVkIGluIHNlY3JldGBcbiAgICApXG5cbiAgICByZXR1cm4gW2FwaUtleVZhbCwgYXBwS2V5VmFsXVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTZWNyZXRWYWx1ZShzZWNyZXRJZDogc3RyaW5nLCBlcnJvclN0cmluZzogc3RyaW5nKSB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0U2VjcmV0TWFuYWdlckNsaWVudCgpXG4gICAgY29uc3QgY21kID0gbmV3IEdldFNlY3JldFZhbHVlQ29tbWFuZCh7IFNlY3JldElkOiBzZWNyZXRJZCB9KVxuXG4gICAgcmV0dXJuIGF3YWl0IGNsaWVudC5zZW5kKGNtZCkudGhlbigoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBkYXRhLlNlY3JldFN0cmluZyFcbiAgICB9KVxuICAgIC8vIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JTdHJpbmcpXG4gICAgLy8gICAgIGV4aXQoMSlcbiAgICAvLyB9KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBUElJbnN0YW5jZShhcGlLZXk6IHN0cmluZywgYXBwS2V5OiBzdHJpbmcpOiB2MS5BV1NJbnRlZ3JhdGlvbkFwaSB7XG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHYxLmNyZWF0ZUNvbmZpZ3VyYXRpb24oe1xuICAgICAgICBhdXRoTWV0aG9kczoge1xuICAgICAgICAgICAgYXBpS2V5QXV0aDogYXBpS2V5LFxuICAgICAgICAgICAgYXBwS2V5QXV0aDogYXBwS2V5XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBhcGlJbnN0YW5jZSA9IG5ldyB2MS5BV1NJbnRlZ3JhdGlvbkFwaShjb25maWd1cmF0aW9uKTtcblxuICAgIHJldHVybiBhcGlJbnN0YW5jZVxufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVBV1NJbnRlZ3JhdGlvbihhcGlLZXk6IHN0cmluZywgYXBwS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgQVdTIHRhZyBmaWx0ZXJzIHJldHVybnMgXCJPS1wiIHJlc3BvbnNlXG4gICAgICovXG5cbiAgICByZXR1cm4gYXdhaXQgZ2V0QVBJS2V5KGFwaUtleSwgYXBwS2V5KVxuICAgICAgICAudGhlbigoW2FwaUtleVZhbHVlLCBhcHBLZXlWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGF0YWRvZ10gUmVhZCBzZWNyZXRzJylcbiAgICAgICAgICAgIGNvbnN0IGFwaUluc3RhbmNlID0gY3JlYXRlQVBJSW5zdGFuY2UoYXBpS2V5VmFsdWUsIGFwcEtleVZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFXU0FQSUludGVncmF0aW9uKGFwaUluc3RhbmNlKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbRGF0YWRvZ10gVXBkYXRlZCBhY2NvdW50IHN1Y2Nlc3NmdWxseVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltEYXRhZG9nXSBGYWlsZWQgdG8gdXBkYXRlIGNvbmZpZ3VyYXRpb24sIHRyeWluZyB0byBjcmVhdGUgaXQgaW5zdGVhZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQVdTQVBJSW50ZWdyYXRpb24oYXBpSW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YTogdjEuQVdTQWNjb3VudENyZWF0ZVJlc3BvbnNlKSA9PiB7IHJldHVybiBkYXRhLmV4dGVybmFsSWQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4geyBjb25zb2xlLmVycm9yKGVycm9yKTsgZXhpdCgxKSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0RhdGFkb2ddIEZhaWxlZCB0byBnZXQgQVBQIEtleVwiLCBlcnIpXG4gICAgICAgICAgICBleGl0KDEpXG4gICAgICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlQVdTQVBJSW50ZWdyYXRpb24oYXBpSW5zdGFuY2U6IHYxLkFXU0ludGVncmF0aW9uQXBpKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBwYXJhbXM6IHYxLkFXU0ludGVncmF0aW9uQXBpQ3JlYXRlQVdTQWNjb3VudFJlcXVlc3QgPSB7XG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGFjY291bnRJZDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCEsXG4gICAgICAgICAgICBmaWx0ZXJUYWdzOiBbYGFjY291bnRfbmFtZToke3Byb2Nlc3MuZW52LkFDQ09VTlRfTkFNRX1gXSxcbiAgICAgICAgICAgIGhvc3RUYWdzOiBbYGFjY291bnRfbmFtZToke3Byb2Nlc3MuZW52LkFDQ09VTlRfTkFNRX1gXSxcbiAgICAgICAgICAgIG1ldHJpY3NDb2xsZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHJlc291cmNlQ29sbGVjdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBjc3BtUmVzb3VyY2VDb2xsZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGV4Y2x1ZGVkUmVnaW9uczogW1widXMtZWFzdC0xXCIsIFwidXMtd2VzdC0yXCJdLFxuICAgICAgICAgICAgcm9sZU5hbWU6IFwiRGF0YWRvZ0FXU0ludGVncmF0aW9uUm9sZVwiLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gYXBpSW5zdGFuY2VcbiAgICAgICAgLmNyZWF0ZUFXU0FjY291bnQocGFyYW1zKVxuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFXU0FQSUludGVncmF0aW9uKGFwaUluc3RhbmNlOiB2MS5BV1NJbnRlZ3JhdGlvbkFwaSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcGFyYW1zOiB2MS5BV1NJbnRlZ3JhdGlvbkFwaVVwZGF0ZUFXU0FjY291bnRSZXF1ZXN0ID0ge1xuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICBhY2NvdW50SWQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQhLFxuICAgICAgICAgICAgZmlsdGVyVGFnczogW2BhY2NvdW50X25hbWU6JHtwcm9jZXNzLmVudi5BQ0NPVU5UX05BTUV9YF0sXG4gICAgICAgICAgICBob3N0VGFnczogW2BhY2NvdW50X25hbWU6JHtwcm9jZXNzLmVudi5BQ0NPVU5UX05BTUV9YF0sXG4gICAgICAgICAgICBtZXRyaWNzQ29sbGVjdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICByZXNvdXJjZUNvbGxlY3Rpb25FbmFibGVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBhY2NvdW50SWQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQhLFxuICAgICAgICByb2xlTmFtZTogXCJEYXRhZG9nQVdTSW50ZWdyYXRpb25Sb2xlXCIsXG4gICAgfTtcblxuICAgIHJldHVybiBhd2FpdCBhcGlJbnN0YW5jZVxuICAgICAgICAudXBkYXRlQVdTQWNjb3VudChwYXJhbXMpXG59XG5cbi8vIERlcHJlY2F0ZWQgP1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZUxvZ0NvbGxlY3Rpb24obGFtYmRhQXJuOiBzdHJpbmcsIHNlcnZpY2VzPzogc3RyaW5nW10sIHNlY3JldEtleT86IHN0cmluZykge1xuICAgIC8vIGNvbnN0IHNlY3JldCA9IGF3YWl0IGdldEFQSUtleShBUElfS0VZX1NFQ1JFVCwgQVBQX0tFWV9TRUNSRVQpXG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHYxLmNyZWF0ZUNvbmZpZ3VyYXRpb24oe1xuICAgICAgICBhdXRoTWV0aG9kczoge1xuICAgICAgICAgICAgYXBpS2V5QXV0aDogQVBJX0tFWV9TRUNSRVQsXG4gICAgICAgICAgICBhcHBLZXlBdXRoOiBBUFBfS0VZX1NFQ1JFVFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gVGhpcyBpcyBjcmVhdGVkIGFmdGVyIGludGVncmF0aW9uIGlzIGNyZWF0ZWQsIGFsb25nIHdpdGggZm9yd2FyZGVyIHN0YWNrLlxuXG4gICAgYXdhaXQgY3JlYXRlQVdTTGFtYmRhQVJOKG5ldyB2MS5BV1NMb2dzSW50ZWdyYXRpb25BcGkoY29uZmlndXJhdGlvbiksIGxhbWJkYUFybilcbiAgICBhd2FpdCBlbmFibGVBV1NMb2dTZXJ2aWNlcyhuZXcgdjEuQVdTTG9nc0ludGVncmF0aW9uQXBpKGNvbmZpZ3VyYXRpb24pLCBzZXJ2aWNlcylcblxuXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBV1NMYW1iZGFBUk4oYXBpSW5zdGFuY2U6IHYxLkFXU0xvZ3NJbnRlZ3JhdGlvbkFwaSwgbGFtYmRhQXJuOiBzdHJpbmcpIHtcblxuICAgIGNvbnN0IHBhcmFtczogdjEuQVdTTG9nc0ludGVncmF0aW9uQXBpQ3JlYXRlQVdTTGFtYmRhQVJOUmVxdWVzdCA9IHtcbiAgICAgICAgYm9keToge1xuICAgICAgICAgICAgYWNjb3VudElkOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5UISxcbiAgICAgICAgICAgIGxhbWJkYUFybjogbGFtYmRhQXJuLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBhd2FpdCBhcGlJbnN0YW5jZVxuICAgICAgICAuY3JlYXRlQVdTTGFtYmRhQVJOKHBhcmFtcylcbiAgICAgICAgLnRoZW4oKGRhdGE6IGFueSkgPT4gY29uc29sZS5sb2coXCJbRGF0YWRvZ10gTGFtYmRhIEludGVncmF0aW9uIGZvciBsb2dzIGNyZWF0ZWRcIikpXG4gICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgICAgIGV4aXQoMSlcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmFibGVBV1NMb2dTZXJ2aWNlcyhhcGlJbnN0YW5jZTogdjEuQVdTTG9nc0ludGVncmF0aW9uQXBpLCBzZXJ2aWNlcyA9IFtcImxhbWJkYVwiXSkge1xuXG4gICAgY29uc3QgcGFyYW1zOiB2MS5BV1NMb2dzSW50ZWdyYXRpb25BcGlFbmFibGVBV1NMb2dTZXJ2aWNlc1JlcXVlc3QgPSB7XG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGFjY291bnRJZDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCEsXG4gICAgICAgICAgICBzZXJ2aWNlczogc2VydmljZXNcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgYXdhaXQgYXBpSW5zdGFuY2VcbiAgICAgICAgLmVuYWJsZUFXU0xvZ1NlcnZpY2VzKHBhcmFtcylcbiAgICAgICAgLnRoZW4oKGRhdGE6IGFueSkgPT4gY29uc29sZS5sb2coYFtEYXRhZG9nXSBFbmFibGVkIHNlcnZpY2VzIGZvciAke3NlcnZpY2VzfWApKVxuICAgICAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHsgY29uc29sZS5lcnJvcihlcnJvcik7IGV4aXQoMSkgfSk7XG59XG4iXX0=