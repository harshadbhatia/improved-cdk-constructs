"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enableAWSLogServices = exports.createAWSLambdaARN = exports.configureLogCollection = exports.setupDatadogIntegration = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const datadog_api_client_1 = require("@datadog/datadog-api-client");
const process_1 = require("process");
const API_KEY_SECRET = '/account/datadog/api-key';
const APP_KEY_SECRET = '/account/datadog/app-key';
const EXTERNAL_ID_SECRET = '/account/datadog/external-id';
async function setupDatadogIntegration(apiKey, appKey) {
    return await createAWSIntegration(apiKey, appKey)
        .then((externalId) => {
        if (externalId) {
            createExternalIDSecret(externalId);
            return externalId;
            // .then((data) => externalId)
            // .catch((err) => console.error("[Datadog] Unable to update external id to secret"))
        }
        else {
            // Could be an update // we get external id
            const s = getSecretValue(EXTERNAL_ID_SECRET, `[Datadog] Unable to get secret at ${EXTERNAL_ID_SECRET}`);
            return s;
            // .then((v) => JSON.parse(v).id)
            // .catch((err) => console.log("[Datadog]Unable to get secret"))
        }
    }).catch((err) => console.error("[Datadog] Unable to create AWS Integration", err));
}
exports.setupDatadogIntegration = setupDatadogIntegration;
async function createExternalIDSecret(externalId) {
    const client = getSecretManagerClient();
    const cmd = new client_secrets_manager_1.CreateSecretCommand({
        Name: EXTERNAL_ID_SECRET,
        Description: 'External ID associated with Datadog AWS Integration',
        SecretString: `{"id": "${externalId}"}`,
    });
    await client.send(cmd).then((data) => {
        console.log("[Datadog] External ID secret created");
        return 'OK';
    }).catch((err) => {
        console.error(`[Datadog] Unable to create secret at location /account/datadog/external-id`, err);
        process_1.exit(1);
    });
}
function getSecretManagerClient() {
    const client = new client_secrets_manager_1.SecretsManagerClient({ region: process.env.CDK_DEFAULT_REGION });
    return client;
}
async function getAPIKey(apiKey, appKey) {
    const apiKeyVal = await getSecretValue(apiKey, `[Datadog] Unable to find secret ${apiKey}. Ensure only value is stored in secret`);
    const appKeyVal = await getSecretValue(appKey, `[Datadog] Unable to find secret ${appKey}. Ensure only value is stored in secret`);
    return [apiKeyVal, appKeyVal];
}
async function getSecretValue(secretId, errorString) {
    const client = getSecretManagerClient();
    const cmd = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: secretId });
    return await client.send(cmd).then((data) => {
        return data.SecretString;
    });
    // .catch((err) => {
    //     console.error(errorString)
    //     exit(1)
    // })
}
function createAPIInstance(apiKey, appKey) {
    const configuration = datadog_api_client_1.v1.createConfiguration({
        authMethods: {
            apiKeyAuth: apiKey,
            appKeyAuth: appKey
        }
    });
    const apiInstance = new datadog_api_client_1.v1.AWSIntegrationApi(configuration);
    return apiInstance;
}
async function createAWSIntegration(apiKey, appKey) {
    /**
     * Get all AWS tag filters returns "OK" response
     */
    return await getAPIKey(apiKey, appKey)
        .then(([apiKeyValue, appKeyValue]) => {
        console.log('[Datadog] Read secrets');
        const apiInstance = createAPIInstance(apiKeyValue, appKeyValue);
        return updateAWSAPIIntegration(apiInstance)
            .then((data) => {
            console.log("[Datadog] Updated account successfully");
            return;
        }).catch((error) => {
            console.log("[Datadog] Failed to update configuration, trying to create it instead");
            return createAWSAPIIntegration(apiInstance)
                .then((data) => { return data.externalId; })
                .catch((error) => { console.error(error); process_1.exit(1); });
        });
    }).catch((err) => {
        console.error("[Datadog] Failed to get APP Key", err);
        process_1.exit(1);
    });
}
function createAWSAPIIntegration(apiInstance) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            filterTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            hostTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            metricsCollectionEnabled: true,
            resourceCollectionEnabled: true,
            cspmResourceCollectionEnabled: true,
            // excludedRegions: ["us-east-1", "us-west-2"],
            roleName: "DatadogAWSIntegrationRole",
        },
    };
    return apiInstance
        .createAWSAccount(params);
}
async function updateAWSAPIIntegration(apiInstance) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            filterTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            hostTags: [`account_name:${process.env.ACCOUNT_NAME}`],
            metricsCollectionEnabled: true,
            resourceCollectionEnabled: true,
        },
        accountId: process.env.CDK_DEFAULT_ACCOUNT,
        roleName: "DatadogAWSIntegrationRole",
    };
    return await apiInstance
        .updateAWSAccount(params);
}
// Deprecated ?
async function configureLogCollection(lambdaArn, services, secretKey) {
    // const secret = await getAPIKey(API_KEY_SECRET, APP_KEY_SECRET)
    const configuration = datadog_api_client_1.v1.createConfiguration({
        authMethods: {
            apiKeyAuth: API_KEY_SECRET,
            appKeyAuth: APP_KEY_SECRET
        }
    });
    // This is created after integration is created, along with forwarder stack.
    await createAWSLambdaARN(new datadog_api_client_1.v1.AWSLogsIntegrationApi(configuration), lambdaArn);
    await enableAWSLogServices(new datadog_api_client_1.v1.AWSLogsIntegrationApi(configuration), services);
}
exports.configureLogCollection = configureLogCollection;
async function createAWSLambdaARN(apiInstance, lambdaArn) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            lambdaArn: lambdaArn,
        },
    };
    await apiInstance
        .createAWSLambdaARN(params)
        .then((data) => console.log("[Datadog] Lambda Integration for logs created"))
        .catch((error) => {
        console.error(error);
        process_1.exit(1);
    });
}
exports.createAWSLambdaARN = createAWSLambdaARN;
async function enableAWSLogServices(apiInstance, services = ["lambda"]) {
    const params = {
        body: {
            accountId: process.env.CDK_DEFAULT_ACCOUNT,
            services: services
        },
    };
    await apiInstance
        .enableAWSLogServices(params)
        .then((data) => console.log(`[Datadog] Enabled services for ${services}`))
        .catch((error) => { console.error(error); process_1.exit(1); });
}
exports.enableAWSLogServices = enableAWSLogServices;
//# sourceMappingURL=data:application/json;base64,