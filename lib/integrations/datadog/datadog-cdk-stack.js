"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatadogStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const datadog_cdk_constructs_v2_1 = require("datadog-cdk-constructs-v2");
function applyDefaultsToProps(props) {
    // ENV is different for datadog env
    const p = { ...props };
    delete p['env'];
    return Object.assign({}, p, {
        "nodeLayerVersion": 78,
        "pythonLayerVersion": 58,
        "extensionLayerVersion": 22,
        "enableDatadogTracing": true,
        "flushMetricsToLogs": true,
        "site": "datadoghq.com",
        "env": props.datadogEnv,
        "service": "",
        "datadogTags": ""
    });
}
class DatadogStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const apiKeySecret = props.apiKeySecret || "/account/datadog/api-key";
        const propsWDefaults = applyDefaultsToProps(props);
        propsWDefaults.apiKeySecretArn = aws_secretsmanager_1.Secret.fromSecretNameV2(this, 'APIKeySecret', apiKeySecret).secretArn;
        this.datadogCDK = new datadog_cdk_constructs_v2_1.Datadog(this, "DatadogIntegration", propsWDefaults);
        // datadogCDK.addLambdaFunctions([f])
    }
}
exports.DatadogStack = DatadogStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWRvZy1jZGstc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhZG9nLWNkay1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0M7QUFDcEMsdUVBQXdEO0FBRXhELHlFQUFvRDtBQU1wRCxTQUFTLG9CQUFvQixDQUFDLEtBQXdCO0lBQ2xELG1DQUFtQztJQUNuQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUM7SUFDdkIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN4QixrQkFBa0IsRUFBRSxFQUFFO1FBQ3RCLG9CQUFvQixFQUFFLEVBQUU7UUFDeEIsdUJBQXVCLEVBQUUsRUFBRTtRQUMzQixzQkFBc0IsRUFBRSxJQUFJO1FBQzVCLG9CQUFvQixFQUFFLElBQUk7UUFDMUIsTUFBTSxFQUFFLGVBQWU7UUFDdkIsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFXO1FBQ3hCLFNBQVMsRUFBRSxFQUFFO1FBQ2IsYUFBYSxFQUFFLEVBQUU7S0FDcEIsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUVELE1BQWEsWUFBYSxTQUFRLG1CQUFLO0lBSW5DLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDL0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxZQUFZLEdBQUcsS0FBTSxDQUFDLFlBQVksSUFBSSwwQkFBMEIsQ0FBQztRQUV2RSxNQUFNLGNBQWMsR0FBa0Msb0JBQW9CLENBQUMsS0FBTSxDQUFDLENBQUE7UUFDbEYsY0FBYyxDQUFDLGVBQWUsR0FBRywyQkFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFBO1FBRXRHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxtQ0FBTyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUUxRSxxQ0FBcUM7SUFDekMsQ0FBQztDQUNKO0FBaEJELG9DQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBTZWNyZXQgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNlY3JldHNtYW5hZ2VyXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRGF0YWRvZyB9IGZyb20gXCJkYXRhZG9nLWNkay1jb25zdHJ1Y3RzLXYyXCI7XG5pbXBvcnQgeyBEYXRhZG9nU3RhY2tQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2VzL2xpYi9pbnRlZ3JhdGlvbnMvZGF0YWRvZy9pbnRlZmFjZXNcIjtcblxudHlwZSBEYXRhZG9nU3RhY2tQcm9wc1dpdGhEZWZhdWx0cyA9IFJlcXVpcmVkPFBpY2s8RGF0YWRvZ1N0YWNrUHJvcHMsIFwibm9kZUxheWVyVmVyc2lvblwiIHwgXCJweXRob25MYXllclZlcnNpb25cIiB8IFwiZW5hYmxlRGF0YWRvZ1RyYWNpbmdcIiB8XG4gICAgXCJmbHVzaE1ldHJpY3NUb0xvZ3NcIiB8IFwic2l0ZVwiIHwgXCJkYXRhZG9nVGFnc1wiPj4gJiBQYXJ0aWFsPFBpY2s8RGF0YWRvZ1N0YWNrUHJvcHMsIFwiYXBpS2V5U2VjcmV0QXJuXCI+PiAmIHsgZW52OiBzdHJpbmcgfTtcblxuZnVuY3Rpb24gYXBwbHlEZWZhdWx0c1RvUHJvcHMocHJvcHM6IERhdGFkb2dTdGFja1Byb3BzKTogRGF0YWRvZ1N0YWNrUHJvcHNXaXRoRGVmYXVsdHMge1xuICAgIC8vIEVOViBpcyBkaWZmZXJlbnQgZm9yIGRhdGFkb2cgZW52XG4gICAgY29uc3QgcCA9IHsgLi4ucHJvcHMgfTtcbiAgICBkZWxldGUgcFsnZW52J11cblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwLCB7XG4gICAgICAgIFwibm9kZUxheWVyVmVyc2lvblwiOiA3OCxcbiAgICAgICAgXCJweXRob25MYXllclZlcnNpb25cIjogNTgsXG4gICAgICAgIFwiZXh0ZW5zaW9uTGF5ZXJWZXJzaW9uXCI6IDIyLFxuICAgICAgICBcImVuYWJsZURhdGFkb2dUcmFjaW5nXCI6IHRydWUsXG4gICAgICAgIFwiZmx1c2hNZXRyaWNzVG9Mb2dzXCI6IHRydWUsXG4gICAgICAgIFwic2l0ZVwiOiBcImRhdGFkb2docS5jb21cIixcbiAgICAgICAgXCJlbnZcIjogcHJvcHMuZGF0YWRvZ0VudiEsXG4gICAgICAgIFwic2VydmljZVwiOiBcIlwiLFxuICAgICAgICBcImRhdGFkb2dUYWdzXCI6IFwiXCJcbiAgICB9KVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YWRvZ1N0YWNrIGV4dGVuZHMgU3RhY2sge1xuXG4gICAgZGF0YWRvZ0NESzogRGF0YWRvZ1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBEYXRhZG9nU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBhcGlLZXlTZWNyZXQgPSBwcm9wcyEuYXBpS2V5U2VjcmV0IHx8IFwiL2FjY291bnQvZGF0YWRvZy9hcGkta2V5XCI7XG5cbiAgICAgICAgY29uc3QgcHJvcHNXRGVmYXVsdHM6IERhdGFkb2dTdGFja1Byb3BzV2l0aERlZmF1bHRzID0gYXBwbHlEZWZhdWx0c1RvUHJvcHMocHJvcHMhKVxuICAgICAgICBwcm9wc1dEZWZhdWx0cy5hcGlLZXlTZWNyZXRBcm4gPSBTZWNyZXQuZnJvbVNlY3JldE5hbWVWMih0aGlzLCAnQVBJS2V5U2VjcmV0JywgYXBpS2V5U2VjcmV0KS5zZWNyZXRBcm5cblxuICAgICAgICB0aGlzLmRhdGFkb2dDREsgPSBuZXcgRGF0YWRvZyh0aGlzLCBcIkRhdGFkb2dJbnRlZ3JhdGlvblwiLCBwcm9wc1dEZWZhdWx0cyk7XG5cbiAgICAgICAgLy8gZGF0YWRvZ0NESy5hZGRMYW1iZGFGdW5jdGlvbnMoW2ZdKVxuICAgIH1cbn0iXX0=