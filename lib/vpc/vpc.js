"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPCStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
class VPCStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.config = props;
        this.createVPC();
        this.addTags();
        this.createParams();
    }
    createVPC() {
        this.vpc = new aws_ec2_1.Vpc(this, 'VPC', {
            maxAzs: this.config.maxAzs || 4,
            cidr: this.config.cidrRange || '10.0.0.0/16',
            natGateways: this.config.natGateways,
            subnetConfiguration: [
                {
                    name: 'Public',
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                },
                {
                    name: 'Private',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
                },
                {
                    name: 'Protected',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                },
                {
                    name: 'Spare',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                },
            ],
        });
    }
    createParams() {
        const vpcIdParameter = new aws_ssm_1.StringParameter(this, 'VPCId', {
            stringValue: this.vpc.vpcId,
            parameterName: this.config.vpcIdSSM,
            description: this.config.vpcIdSSMDescription,
        });
        const privateSubnetParameter = new aws_ssm_1.StringListParameter(this, 'PrivateSubnetIds', {
            stringListValue: this.vpc.privateSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.privateSubnetSSM,
            description: this.config.privateSubnetSSMDescription,
        });
        const publicSubnetParameter = new aws_ssm_1.StringListParameter(this, 'PublicSubnetIds', {
            stringListValue: this.vpc.publicSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.publicSubnetSSM,
            description: this.config.publicSubnetSSMDescription,
        });
        const isolatedSubnetSSM = new aws_ssm_1.StringListParameter(this, 'IsolatedSubnetIds', {
            stringListValue: this.vpc.isolatedSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.isolatedSubnetSSM,
            description: this.config.isolatedSubnetSSMDescription,
        });
    }
    addTags() {
        this.vpc.privateSubnets.forEach((subnet) => {
            aws_cdk_lib_1.Tags.of(subnet).add('kubernetes.io/role/internal-elb', '1');
        });
        this.vpc.publicSubnets.forEach((subnet) => {
            aws_cdk_lib_1.Tags.of(subnet).add('kubernetes.io/role/elb', '1');
        });
        this.vpc.privateSubnets.forEach((subnet) => {
            const ar = JSON.parse(this.config.kubernetesClustersToTag);
            ar.forEach((cluster) => {
                aws_cdk_lib_1.Tags.of(subnet).add(`kubernetes.io/cluster/${cluster}`, 'shared');
            });
        });
    }
}
exports.VPCStack = VPCStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFzRDtBQUN0RCxpREFBc0Q7QUFDdEQsaURBQTJFO0FBSTNFLE1BQWEsUUFBUyxTQUFRLG1CQUFLO0lBSWpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBZ0I7UUFDeEQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQztZQUMvQixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksYUFBYTtZQUM1QyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXO1lBQ3BDLG1CQUFtQixFQUFFO2dCQUNuQjtvQkFDRSxJQUFJLEVBQUUsUUFBUTtvQkFDZCxVQUFVLEVBQUUsb0JBQVUsQ0FBQyxNQUFNO2lCQUM5QjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsU0FBUztvQkFDZixVQUFVLEVBQUUsb0JBQVUsQ0FBQyxtQkFBbUI7aUJBQzNDO2dCQUNEO29CQUNFLElBQUksRUFBRSxXQUFXO29CQUNqQixVQUFVLEVBQUUsb0JBQVUsQ0FBQyxnQkFBZ0I7aUJBQ3hDO2dCQUNEO29CQUNFLElBQUksRUFBRSxPQUFPO29CQUNiLFVBQVUsRUFBRSxvQkFBVSxDQUFDLGdCQUFnQjtpQkFDeEM7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZO1FBQ1YsTUFBTSxjQUFjLEdBQUcsSUFBSSx5QkFBZSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDeEQsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztZQUMzQixhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQ25DLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQjtTQUM3QyxDQUFDLENBQUM7UUFFSCxNQUFNLHNCQUFzQixHQUFHLElBQUksNkJBQW1CLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQy9FLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDekUsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCO1lBQzNDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQjtTQUNyRCxDQUFDLENBQUM7UUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksNkJBQW1CLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1lBQzdFLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDeEUsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZTtZQUMxQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQywwQkFBMEI7U0FDcEQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLDZCQUFtQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUMzRSxlQUFlLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQzFFLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjtZQUM1QyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEI7U0FDdEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QyxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN4QyxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QyxNQUFNLEVBQUUsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQTRDLENBQUMsQ0FBQztZQUMxRixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ3JCLGtCQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsT0FBTyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQWpGRCw0QkFpRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjaywgU3RhY2tQcm9wcywgVGFncyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFN1Ym5ldFR5cGUsIFZwYyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuaW1wb3J0IHsgU3RyaW5nTGlzdFBhcmFtZXRlciwgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNzbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IFZQQ0NvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbGliL3ZwYy9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIFZQQ1N0YWNrIGV4dGVuZHMgU3RhY2sge1xuICB2cGM6IFZwYztcbiAgY29uZmlnOiBWUENDb25maWc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFZQQ0NvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgdGhpcy5jb25maWcgPSBwcm9wcztcbiAgICB0aGlzLmNyZWF0ZVZQQygpO1xuICAgIHRoaXMuYWRkVGFncygpO1xuICAgIHRoaXMuY3JlYXRlUGFyYW1zKCk7XG4gIH1cblxuICBjcmVhdGVWUEMoKTogdm9pZCB7XG4gICAgdGhpcy52cGMgPSBuZXcgVnBjKHRoaXMsICdWUEMnLCB7XG4gICAgICBtYXhBenM6IHRoaXMuY29uZmlnLm1heEF6cyB8fCA0LFxuICAgICAgY2lkcjogdGhpcy5jb25maWcuY2lkclJhbmdlIHx8ICcxMC4wLjAuMC8xNicsXG4gICAgICBuYXRHYXRld2F5czogdGhpcy5jb25maWcubmF0R2F0ZXdheXMsXG4gICAgICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnUHVibGljJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdQcml2YXRlJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9FR1JFU1MsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnUHJvdGVjdGVkJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfSVNPTEFURUQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnU3BhcmUnLFxuICAgICAgICAgIHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFJJVkFURV9JU09MQVRFRCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVQYXJhbXMoKTogdm9pZCB7XG4gICAgY29uc3QgdnBjSWRQYXJhbWV0ZXIgPSBuZXcgU3RyaW5nUGFyYW1ldGVyKHRoaXMsICdWUENJZCcsIHtcbiAgICAgIHN0cmluZ1ZhbHVlOiB0aGlzLnZwYy52cGNJZCxcbiAgICAgIHBhcmFtZXRlck5hbWU6IHRoaXMuY29uZmlnLnZwY0lkU1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLnZwY0lkU1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG5cbiAgICBjb25zdCBwcml2YXRlU3VibmV0UGFyYW1ldGVyID0gbmV3IFN0cmluZ0xpc3RQYXJhbWV0ZXIodGhpcywgJ1ByaXZhdGVTdWJuZXRJZHMnLCB7XG4gICAgICBzdHJpbmdMaXN0VmFsdWU6IHRoaXMudnBjLnByaXZhdGVTdWJuZXRzLm1hcCgoc3VibmV0KSA9PiBzdWJuZXQuc3VibmV0SWQpLFxuICAgICAgcGFyYW1ldGVyTmFtZTogdGhpcy5jb25maWcucHJpdmF0ZVN1Ym5ldFNTTSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmNvbmZpZy5wcml2YXRlU3VibmV0U1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG5cbiAgICBjb25zdCBwdWJsaWNTdWJuZXRQYXJhbWV0ZXIgPSBuZXcgU3RyaW5nTGlzdFBhcmFtZXRlcih0aGlzLCAnUHVibGljU3VibmV0SWRzJywge1xuICAgICAgc3RyaW5nTGlzdFZhbHVlOiB0aGlzLnZwYy5wdWJsaWNTdWJuZXRzLm1hcCgoc3VibmV0KSA9PiBzdWJuZXQuc3VibmV0SWQpLFxuICAgICAgcGFyYW1ldGVyTmFtZTogdGhpcy5jb25maWcucHVibGljU3VibmV0U1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLnB1YmxpY1N1Ym5ldFNTTURlc2NyaXB0aW9uLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaXNvbGF0ZWRTdWJuZXRTU00gPSBuZXcgU3RyaW5nTGlzdFBhcmFtZXRlcih0aGlzLCAnSXNvbGF0ZWRTdWJuZXRJZHMnLCB7XG4gICAgICBzdHJpbmdMaXN0VmFsdWU6IHRoaXMudnBjLmlzb2xhdGVkU3VibmV0cy5tYXAoKHN1Ym5ldCkgPT4gc3VibmV0LnN1Ym5ldElkKSxcbiAgICAgIHBhcmFtZXRlck5hbWU6IHRoaXMuY29uZmlnLmlzb2xhdGVkU3VibmV0U1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLmlzb2xhdGVkU3VibmV0U1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG4gIH1cblxuICBhZGRUYWdzKCk6IHZvaWQge1xuICAgIHRoaXMudnBjLnByaXZhdGVTdWJuZXRzLmZvckVhY2goKHN1Ym5ldCkgPT4ge1xuICAgICAgVGFncy5vZihzdWJuZXQpLmFkZCgna3ViZXJuZXRlcy5pby9yb2xlL2ludGVybmFsLWVsYicsICcxJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZwYy5wdWJsaWNTdWJuZXRzLmZvckVhY2goKHN1Ym5ldCkgPT4ge1xuICAgICAgVGFncy5vZihzdWJuZXQpLmFkZCgna3ViZXJuZXRlcy5pby9yb2xlL2VsYicsICcxJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZwYy5wcml2YXRlU3VibmV0cy5mb3JFYWNoKChzdWJuZXQpID0+IHtcbiAgICAgIGNvbnN0IGFyOiBzdHJpbmdbXSA9IEpTT04ucGFyc2UodGhpcy5jb25maWcua3ViZXJuZXRlc0NsdXN0ZXJzVG9UYWcgYXMgdW5rbm93biBhcyBzdHJpbmcpO1xuICAgICAgYXIuZm9yRWFjaCgoY2x1c3RlcikgPT4ge1xuICAgICAgICBUYWdzLm9mKHN1Ym5ldCkuYWRkKGBrdWJlcm5ldGVzLmlvL2NsdXN0ZXIvJHtjbHVzdGVyfWAsICdzaGFyZWQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=