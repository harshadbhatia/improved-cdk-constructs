"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatadogIntegration = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const constructs_1 = require("constructs");
const config_1 = require("./config");
const datadog_integration_role_stack_1 = require("./datadog-integration-role-stack");
class DatadogIntegration extends constructs_1.Construct {
    /**
     * Based on https://github.com/DataDog/cloudformation-template/blob/master/aws/main.yaml
     */
    constructor(scope, id, props) {
        super(scope, id);
        const propsWithDefaults = (0, config_1.applyDataDogDefaultsToConfig)(props);
        this.createIntegrationRoleStack(propsWithDefaults);
        // This is meant to be legacy, need to investigate other supported services before removal
        // const f = this.createForwarderStack(propsWithDefaults)
    }
    createIntegrationRoleStack(props) {
        return new datadog_integration_role_stack_1.DatadogIntegrationRoleStack(this, 'DatadogIntegrationRole', props);
    }
    // Responsible for shipping logs, custom metrics, etc - Not required when using layer extension
    createForwarderStack(props) {
        return new aws_cdk_lib_1.CfnStack(this, "DatadogForwarderStack", {
            templateUrl: `https://datadog-cloudformation-template.s3.amazonaws.com/aws/forwarder/${props.forwarderVersion}.yaml`,
            parameters: Object.assign({
                DdApiKey: "USE_ARN",
                DdApiKeySecretArn: aws_secretsmanager_1.Secret.fromSecretNameV2(this, "DatadogApiKey", props.apiKey).secretArn,
                DdSite: props.site,
                FunctionName: props.forwarderName,
            }, { ...props.additionalForwarderParams }),
        });
    }
}
exports.DatadogIntegration = DatadogIntegration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWRvZy1pbnRlZ3JhdGlvbi1jb25zdHJ1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhZG9nLWludGVncmF0aW9uLWNvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBOEM7QUFDOUMsdUVBQXdEO0FBQ3hELDJDQUF1QztBQUV2QyxxQ0FBa0c7QUFDbEcscUZBQStFO0FBRy9FLE1BQWEsa0JBQW1CLFNBQVEsc0JBQVM7SUFDN0M7O09BRUc7SUFFSCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNDO1FBQzVFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFaEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFBLHFDQUE0QixFQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTdELElBQUksQ0FBQywwQkFBMEIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ2xELDBGQUEwRjtRQUMxRix5REFBeUQ7SUFFN0QsQ0FBQztJQUVELDBCQUEwQixDQUFDLEtBQStDO1FBQ3RFLE9BQU8sSUFBSSw0REFBMkIsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDakYsQ0FBQztJQUNELCtGQUErRjtJQUN2RixvQkFBb0IsQ0FBQyxLQUErQztRQUV4RSxPQUFPLElBQUksc0JBQVEsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7WUFDL0MsV0FBVyxFQUFFLDBFQUEwRSxLQUFLLENBQUMsZ0JBQWdCLE9BQU87WUFDcEgsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQ3JCO2dCQUNJLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixpQkFBaUIsRUFBRSwyQkFBTSxDQUFDLGdCQUFnQixDQUN0QyxJQUFJLEVBQ0osZUFBZSxFQUNmLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTO2dCQUMzQixNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2xCLFlBQVksRUFBRSxLQUFLLENBQUMsYUFBYTthQUNwQyxFQUNELEVBQUUsR0FBRyxLQUFLLENBQUMseUJBQXlCLEVBQUUsQ0FDekM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUF0Q0QsZ0RBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2ZuU3RhY2ssIFN0YWNrIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBTZWNyZXQgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNlY3JldHNtYW5hZ2VyXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRGF0YWRvZ0FXU0ludGVncmF0aW9uU3RhY2tQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2VzL2xpYi9pbnRlZ3JhdGlvbnMvZGF0YWRvZy9pbnRlZmFjZXNcIjtcbmltcG9ydCB7IGFwcGx5RGF0YURvZ0RlZmF1bHRzVG9Db25maWcsIERhdGFkb2dJbnRlZ3JhdGlvblN0YWNrUHJvcHNXaXRoRGVmYXVsdHMgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IERhdGFkb2dJbnRlZ3JhdGlvblJvbGVTdGFjayB9IGZyb20gXCIuL2RhdGFkb2ctaW50ZWdyYXRpb24tcm9sZS1zdGFja1wiO1xuXG5cbmV4cG9ydCBjbGFzcyBEYXRhZG9nSW50ZWdyYXRpb24gZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXRhRG9nL2Nsb3VkZm9ybWF0aW9uLXRlbXBsYXRlL2Jsb2IvbWFzdGVyL2F3cy9tYWluLnlhbWxcbiAgICAgKi9cblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEYXRhZG9nQVdTSW50ZWdyYXRpb25TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZClcblxuICAgICAgICBjb25zdCBwcm9wc1dpdGhEZWZhdWx0cyA9IGFwcGx5RGF0YURvZ0RlZmF1bHRzVG9Db25maWcocHJvcHMpXG5cbiAgICAgICAgdGhpcy5jcmVhdGVJbnRlZ3JhdGlvblJvbGVTdGFjayhwcm9wc1dpdGhEZWZhdWx0cylcbiAgICAgICAgLy8gVGhpcyBpcyBtZWFudCB0byBiZSBsZWdhY3ksIG5lZWQgdG8gaW52ZXN0aWdhdGUgb3RoZXIgc3VwcG9ydGVkIHNlcnZpY2VzIGJlZm9yZSByZW1vdmFsXG4gICAgICAgIC8vIGNvbnN0IGYgPSB0aGlzLmNyZWF0ZUZvcndhcmRlclN0YWNrKHByb3BzV2l0aERlZmF1bHRzKVxuXG4gICAgfVxuXG4gICAgY3JlYXRlSW50ZWdyYXRpb25Sb2xlU3RhY2socHJvcHM6IERhdGFkb2dJbnRlZ3JhdGlvblN0YWNrUHJvcHNXaXRoRGVmYXVsdHMpOiBTdGFjayB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YWRvZ0ludGVncmF0aW9uUm9sZVN0YWNrKHRoaXMsICdEYXRhZG9nSW50ZWdyYXRpb25Sb2xlJywgcHJvcHMpXG4gICAgfVxuICAgIC8vIFJlc3BvbnNpYmxlIGZvciBzaGlwcGluZyBsb2dzLCBjdXN0b20gbWV0cmljcywgZXRjIC0gTm90IHJlcXVpcmVkIHdoZW4gdXNpbmcgbGF5ZXIgZXh0ZW5zaW9uXG4gICAgcHJpdmF0ZSBjcmVhdGVGb3J3YXJkZXJTdGFjayhwcm9wczogRGF0YWRvZ0ludGVncmF0aW9uU3RhY2tQcm9wc1dpdGhEZWZhdWx0cyk6IENmblN0YWNrIHtcblxuICAgICAgICByZXR1cm4gbmV3IENmblN0YWNrKHRoaXMsIFwiRGF0YWRvZ0ZvcndhcmRlclN0YWNrXCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBgaHR0cHM6Ly9kYXRhZG9nLWNsb3VkZm9ybWF0aW9uLXRlbXBsYXRlLnMzLmFtYXpvbmF3cy5jb20vYXdzL2ZvcndhcmRlci8ke3Byb3BzLmZvcndhcmRlclZlcnNpb259LnlhbWxgLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIERkQXBpS2V5OiBcIlVTRV9BUk5cIixcbiAgICAgICAgICAgICAgICAgICAgRGRBcGlLZXlTZWNyZXRBcm46IFNlY3JldC5mcm9tU2VjcmV0TmFtZVYyKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRGF0YWRvZ0FwaUtleVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuYXBpS2V5KS5zZWNyZXRBcm4sXG4gICAgICAgICAgICAgICAgICAgIERkU2l0ZTogcHJvcHMuc2l0ZSxcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb25OYW1lOiBwcm9wcy5mb3J3YXJkZXJOYW1lLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyAuLi5wcm9wcy5hZGRpdGlvbmFsRm9yd2FyZGVyUGFyYW1zIH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgIH1cbn0iXX0=