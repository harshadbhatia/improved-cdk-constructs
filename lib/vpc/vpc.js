"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPCStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
class VPCStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, config, props) {
        super(scope, id, props);
        this.config = config;
        this.createVPC();
        this.addTags();
        this.createParams();
    }
    createVPC() {
        this.vpc = new aws_ec2_1.Vpc(this, 'VPC', {
            maxAzs: 4,
            cidr: '10.0.0.0/16',
            natGateways: this.config.natGateways,
            subnetConfiguration: [
                {
                    name: 'Public',
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                },
                {
                    name: 'Private',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_NAT,
                },
                {
                    name: 'Protected',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                },
                {
                    name: 'Spare',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                },
            ],
        });
    }
    createParams() {
        const vpcIdParameter = new aws_ssm_1.StringParameter(this, 'VPCId', {
            stringValue: this.vpc.vpcId,
            parameterName: this.config.vpcIdSSM,
            description: this.config.vpcIdSSMDescription,
        });
        const privateSubnetParameter = new aws_ssm_1.StringListParameter(this, 'PrivateSubnetIds', {
            stringListValue: this.vpc.privateSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.privateSubnetSSM,
            description: this.config.privateSubnetSSMDescription,
        });
        const publicSubnetParameter = new aws_ssm_1.StringListParameter(this, 'PublicSubnetIds', {
            stringListValue: this.vpc.publicSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.publicSubnetSSM,
            description: this.config.publicSubnetSSMDescription,
        });
        const isolatedSubnetSSM = new aws_ssm_1.StringListParameter(this, 'IsolatedSubnetIds', {
            stringListValue: this.vpc.isolatedSubnets.map((subnet) => subnet.subnetId),
            parameterName: this.config.isolatedSubnetSSM,
            description: this.config.isolatedSubnetSSMDescription,
        });
    }
    addTags() {
        this.vpc.privateSubnets.forEach((subnet) => {
            aws_cdk_lib_1.Tags.of(subnet).add('kubernetes.io/role/internal-elb', '1');
        });
        this.vpc.publicSubnets.forEach((subnet) => {
            aws_cdk_lib_1.Tags.of(subnet).add('kubernetes.io/role/elb', '1');
        });
        this.vpc.privateSubnets.forEach((subnet) => {
            const ar = JSON.parse(this.config.kubernetesClustersToTag);
            ar.forEach((cluster) => {
                aws_cdk_lib_1.Tags.of(subnet).add(`kubernetes.io/cluster/${cluster}`, 'shared');
            });
        });
    }
}
exports.VPCStack = VPCStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFzRDtBQUN0RCxpREFBc0Q7QUFDdEQsaURBQTJFO0FBSTNFLE1BQWEsUUFBUyxTQUFRLG1CQUFLO0lBSWpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsTUFBaUIsRUFBRSxLQUFrQjtRQUM3RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQzlCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsSUFBSSxFQUFFLGFBQWE7WUFDbkIsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVztZQUNwQyxtQkFBbUIsRUFBRTtnQkFDbkI7b0JBQ0UsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsVUFBVSxFQUFFLG9CQUFVLENBQUMsTUFBTTtpQkFDOUI7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsVUFBVSxFQUFFLG9CQUFVLENBQUMsZ0JBQWdCO2lCQUN4QztnQkFDRDtvQkFDRSxJQUFJLEVBQUUsV0FBVztvQkFDakIsVUFBVSxFQUFFLG9CQUFVLENBQUMsZ0JBQWdCO2lCQUN4QztnQkFDRDtvQkFDRSxJQUFJLEVBQUUsT0FBTztvQkFDYixVQUFVLEVBQUUsb0JBQVUsQ0FBQyxnQkFBZ0I7aUJBQ3hDO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNWLE1BQU0sY0FBYyxHQUFHLElBQUkseUJBQWUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQ3hELFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDM0IsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtZQUNuQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7U0FDN0MsQ0FBQyxDQUFDO1FBRUgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLDZCQUFtQixDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUMvRSxlQUFlLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ3pFLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQjtZQUMzQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkI7U0FDckQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLDZCQUFtQixDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUM3RSxlQUFlLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ3hFLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWU7WUFDMUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsMEJBQTBCO1NBQ3BELENBQUMsQ0FBQztRQUVILE1BQU0saUJBQWlCLEdBQUcsSUFBSSw2QkFBbUIsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDM0UsZUFBZSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUMxRSxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7WUFDNUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsNEJBQTRCO1NBQ3RELENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekMsa0JBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDeEMsa0JBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekMsTUFBTSxFQUFFLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUE0QyxDQUFDLENBQUM7WUFDMUYsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNyQixrQkFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMseUJBQXlCLE9BQU8sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BFLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFqRkQsNEJBaUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2ssIFN0YWNrUHJvcHMsIFRhZ3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBTdWJuZXRUeXBlLCBWcGMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCB7IFN0cmluZ0xpc3RQYXJhbWV0ZXIsIFN0cmluZ1BhcmFtZXRlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zc20nO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBWUENDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xpYi92cGMvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBWUENTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgdnBjOiBWcGM7XG4gIGNvbmZpZzogVlBDQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGNvbmZpZzogVlBDQ29uZmlnLCBwcm9wcz86IFN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuY3JlYXRlVlBDKCk7XG4gICAgdGhpcy5hZGRUYWdzKCk7XG4gICAgdGhpcy5jcmVhdGVQYXJhbXMoKTtcbiAgfVxuXG4gIGNyZWF0ZVZQQygpOiB2b2lkIHtcbiAgICB0aGlzLnZwYyA9IG5ldyBWcGModGhpcywgJ1ZQQycsIHtcbiAgICAgIG1heEF6czogNCxcbiAgICAgIGNpZHI6ICcxMC4wLjAuMC8xNicsXG4gICAgICBuYXRHYXRld2F5czogdGhpcy5jb25maWcubmF0R2F0ZXdheXMsXG4gICAgICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnUHVibGljJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdQcml2YXRlJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9OQVQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnUHJvdGVjdGVkJyxcbiAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfSVNPTEFURUQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnU3BhcmUnLFxuICAgICAgICAgIHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFJJVkFURV9JU09MQVRFRCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVQYXJhbXMoKTogdm9pZCB7XG4gICAgY29uc3QgdnBjSWRQYXJhbWV0ZXIgPSBuZXcgU3RyaW5nUGFyYW1ldGVyKHRoaXMsICdWUENJZCcsIHtcbiAgICAgIHN0cmluZ1ZhbHVlOiB0aGlzLnZwYy52cGNJZCxcbiAgICAgIHBhcmFtZXRlck5hbWU6IHRoaXMuY29uZmlnLnZwY0lkU1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLnZwY0lkU1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG5cbiAgICBjb25zdCBwcml2YXRlU3VibmV0UGFyYW1ldGVyID0gbmV3IFN0cmluZ0xpc3RQYXJhbWV0ZXIodGhpcywgJ1ByaXZhdGVTdWJuZXRJZHMnLCB7XG4gICAgICBzdHJpbmdMaXN0VmFsdWU6IHRoaXMudnBjLnByaXZhdGVTdWJuZXRzLm1hcCgoc3VibmV0KSA9PiBzdWJuZXQuc3VibmV0SWQpLFxuICAgICAgcGFyYW1ldGVyTmFtZTogdGhpcy5jb25maWcucHJpdmF0ZVN1Ym5ldFNTTSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmNvbmZpZy5wcml2YXRlU3VibmV0U1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG5cbiAgICBjb25zdCBwdWJsaWNTdWJuZXRQYXJhbWV0ZXIgPSBuZXcgU3RyaW5nTGlzdFBhcmFtZXRlcih0aGlzLCAnUHVibGljU3VibmV0SWRzJywge1xuICAgICAgc3RyaW5nTGlzdFZhbHVlOiB0aGlzLnZwYy5wdWJsaWNTdWJuZXRzLm1hcCgoc3VibmV0KSA9PiBzdWJuZXQuc3VibmV0SWQpLFxuICAgICAgcGFyYW1ldGVyTmFtZTogdGhpcy5jb25maWcucHVibGljU3VibmV0U1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLnB1YmxpY1N1Ym5ldFNTTURlc2NyaXB0aW9uLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaXNvbGF0ZWRTdWJuZXRTU00gPSBuZXcgU3RyaW5nTGlzdFBhcmFtZXRlcih0aGlzLCAnSXNvbGF0ZWRTdWJuZXRJZHMnLCB7XG4gICAgICBzdHJpbmdMaXN0VmFsdWU6IHRoaXMudnBjLmlzb2xhdGVkU3VibmV0cy5tYXAoKHN1Ym5ldCkgPT4gc3VibmV0LnN1Ym5ldElkKSxcbiAgICAgIHBhcmFtZXRlck5hbWU6IHRoaXMuY29uZmlnLmlzb2xhdGVkU3VibmV0U1NNLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLmlzb2xhdGVkU3VibmV0U1NNRGVzY3JpcHRpb24sXG4gICAgfSk7XG4gIH1cblxuICBhZGRUYWdzKCk6IHZvaWQge1xuICAgIHRoaXMudnBjLnByaXZhdGVTdWJuZXRzLmZvckVhY2goKHN1Ym5ldCkgPT4ge1xuICAgICAgVGFncy5vZihzdWJuZXQpLmFkZCgna3ViZXJuZXRlcy5pby9yb2xlL2ludGVybmFsLWVsYicsICcxJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZwYy5wdWJsaWNTdWJuZXRzLmZvckVhY2goKHN1Ym5ldCkgPT4ge1xuICAgICAgVGFncy5vZihzdWJuZXQpLmFkZCgna3ViZXJuZXRlcy5pby9yb2xlL2VsYicsICcxJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZwYy5wcml2YXRlU3VibmV0cy5mb3JFYWNoKChzdWJuZXQpID0+IHtcbiAgICAgIGNvbnN0IGFyOiBzdHJpbmdbXSA9IEpTT04ucGFyc2UodGhpcy5jb25maWcua3ViZXJuZXRlc0NsdXN0ZXJzVG9UYWcgYXMgdW5rbm93biBhcyBzdHJpbmcpO1xuICAgICAgYXIuZm9yRWFjaCgoY2x1c3RlcikgPT4ge1xuICAgICAgICBUYWdzLm9mKHN1Ym5ldCkuYWRkKGBrdWJlcm5ldGVzLmlvL2NsdXN0ZXIvJHtjbHVzdGVyfWAsICdzaGFyZWQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=